{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-363dc80c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"image-grid\"\n};\nconst _hoisted_2 = [\"src\", \"alt\", \"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.images, (image, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"image-container\"\n    }, [_createElementVNode(\"img\", {\n      src: image.src,\n      alt: image.name,\n      class: _normalizeClass([\"grid-image\", {\n        'selected': image.selected\n      }]),\n      onClick: $event => $options.toggleImage(index)\n    }, null, 10 /* CLASS, PROPS */, _hoisted_2)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","images","image","index","key","_createElementVNode","src","alt","name","_normalizeClass","selected","onClick","$event","$options","toggleImage","_hoisted_2"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Tilecaptcha.vue"],"sourcesContent":["<template>\r\n  <div class=\"image-grid\">\r\n    <div\r\n      v-for=\"(image, index) in images\"\r\n      :key=\"index\"\r\n      class=\"image-container\"\r\n    >\r\n      <img :src=\"image.src\" :alt=\"image.name\" class=\"grid-image\" @click=\"toggleImage(index)\" :class=\"{ 'selected': image.selected }\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      images: [],\r\n      directories: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadImages();\r\n  },\r\n  methods: {\r\n    async loadImages() {\r\n      // Fetch a list of directories\r\n      const directoryResponse = await fetch(\"@/assets\");\r\n      const directories = await directoryResponse.json();\r\n\r\n      // Pick 3 random directories\r\n      this.directories = this.pickRandomItems(directories, 3);\r\n\r\n      // Load images from the selected directories\r\n      this.directories.forEach(async (directory) => {\r\n        const imagesResponse = await fetch(`@/assets/${directory}`);\r\n        const images = await imagesResponse.json();\r\n        this.images.push(...images);\r\n      });\r\n    },\r\n    toggleImage(index) {\r\n      this.images[index].selected = !this.images[index].selected;\r\n    },\r\n    pickRandomItems(array, count) {\r\n      const shuffled = array.sort(() => 0.5 - Math.random());\r\n      return shuffled.slice(0, count);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.image-grid {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.image-container {\r\n  flex: 0 0 25%;\r\n  padding: 5px;\r\n}\r\n\r\n.grid-image {\r\n  width: 100%;\r\n  height: auto;\r\n  cursor: pointer;\r\n}\r\n\r\n.selected {\r\n  outline: 2px solid blue;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAY;mBADzB;;uBACEC,mBAAA,CAQM,OARNC,UAQM,I,kBAPJD,mBAAA,CAMME,SAAA,QARVC,WAAA,CAG+BC,KAAA,CAAAC,MAAM,EAHrC,CAGcC,KAAK,EAAEC,KAAK;yBADtBP,mBAAA,CAMM;MAJHQ,GAAG,EAAED,KAAK;MACXR,KAAK,EAAC;QAENU,mBAAA,CAAiI;MAA3HC,GAAG,EAAEJ,KAAK,CAACI,GAAG;MAAGC,GAAG,EAAEL,KAAK,CAACM,IAAI;MAAEb,KAAK,EAPnDc,eAAA,EAOoD,YAAY;QAAA,YAAmDP,KAAK,CAACQ;MAAQ;MAA/DC,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW,CAACX,KAAK;oCAP1FY,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}