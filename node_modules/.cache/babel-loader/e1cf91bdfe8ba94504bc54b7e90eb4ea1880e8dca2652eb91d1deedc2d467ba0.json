{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      images: [],\n      selectedImages: [] // Array to store selected image indices\n    };\n  },\n  mounted() {\n    this.loadImagesFromDirectory();\n  },\n  methods: {\n    loadImagesFromDirectory() {\n      // Choose a random directory between 1, 2, and 3\n      const randomDirectory = Math.floor(Math.random() * 3) + 1;\n\n      // Manually import images from the randomly chosen directory\n      const imageContext = require.context(`@/assets/${randomDirectory}`, false, /\\.(png|jpe?g|gif|svg)$/);\n\n      // Get all image paths in the directory\n      const imagePaths = imageContext.keys().map(key => imageContext(key));\n\n      // Set the images array to the loaded image paths\n      this.images = imagePaths;\n    },\n    toggleImage(index) {\n      // Toggle the selected state of the image at the given index\n      if (this.isSelected(index)) {\n        this.selectedImages = this.selectedImages.filter(i => i !== index);\n      } else {\n        this.selectedImages.push(index);\n      }\n    },\n    isSelected(index) {\n      // Check if the image at the given index is selected\n      return this.selectedImages.includes(index);\n    }\n  }\n};","map":{"version":3,"names":["data","images","selectedImages","mounted","loadImagesFromDirectory","methods","randomDirectory","Math","floor","random","imageContext","require","context","imagePaths","keys","map","key","toggleImage","index","isSelected","filter","i","push","includes"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Tilecaptcha.vue"],"sourcesContent":["<template>\r\n  <div class=\"burger\">\r\n    <div class=\"image-gallery\">\r\n      <img v-for=\"(image, index) in images\"\r\n           :key=\"index\"\r\n           :src=\"image\"\r\n           :alt=\"'Image ' + (index + 1)\"\r\n           @click=\"toggleImage(index)\"\r\n           :style=\"{ opacity: isSelected(index) ? 0.5 : 1 }\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      images: [],\r\n      selectedImages: [], // Array to store selected image indices\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadImagesFromDirectory();\r\n  },\r\n  methods: {\r\n    loadImagesFromDirectory() {\r\n  // Choose a random directory between 1, 2, and 3\r\n  const randomDirectory = Math.floor(Math.random() * 3) + 1;\r\n\r\n  // Manually import images from the randomly chosen directory\r\n  const imageContext = require.context(`@/assets/${randomDirectory}`, false, /\\.(png|jpe?g|gif|svg)$/);\r\n  \r\n  // Get all image paths in the directory\r\n  const imagePaths = imageContext.keys().map(key => imageContext(key));\r\n\r\n  // Set the images array to the loaded image paths\r\n  this.images = imagePaths;\r\n},\r\n    toggleImage(index) {\r\n      // Toggle the selected state of the image at the given index\r\n      if (this.isSelected(index)) {\r\n        this.selectedImages = this.selectedImages.filter(i => i !== index);\r\n      } else {\r\n        this.selectedImages.push(index);\r\n      }\r\n    },\r\n    isSelected(index) {\r\n      // Check if the image at the given index is selected\r\n      return this.selectedImages.includes(index);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.image-gallery {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  width: 30%;\r\n  box-sizing: border-box; /* Include padding and border in the element's total width */\r\n}\r\n\r\n.image-gallery img {\r\n  flex: 0 0 calc(25% - 10px);\r\n  max-width: calc(25% - 10px);\r\n  max-height: calc(25vw - 10px);\r\n  object-fit: cover;\r\n  margin: 5px;\r\n}\r\n\r\n</style>\r\n"],"mappings":";AAcA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,cAAc,EAAE,EAAE,CAAE;IACtB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,uBAAuB,CAAC,CAAC;EAChC,CAAC;EACDC,OAAO,EAAE;IACPD,uBAAuBA,CAAA,EAAG;MAC5B;MACA,MAAME,eAAc,GAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;;MAEzD;MACA,MAAMC,YAAW,GAAIC,OAAO,CAACC,OAAO,CAAE,YAAWN,eAAgB,EAAC,EAAE,KAAK,EAAE,wBAAwB,CAAC;;MAEpG;MACA,MAAMO,UAAS,GAAIH,YAAY,CAACI,IAAI,CAAC,CAAC,CAACC,GAAG,CAACC,GAAE,IAAKN,YAAY,CAACM,GAAG,CAAC,CAAC;;MAEpE;MACA,IAAI,CAACf,MAAK,GAAIY,UAAU;IAC1B,CAAC;IACGI,WAAWA,CAACC,KAAK,EAAE;MACjB;MACA,IAAI,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC,EAAE;QAC1B,IAAI,CAAChB,cAAa,GAAI,IAAI,CAACA,cAAc,CAACkB,MAAM,CAACC,CAAA,IAAKA,CAAA,KAAMH,KAAK,CAAC;MACpE,OAAO;QACL,IAAI,CAAChB,cAAc,CAACoB,IAAI,CAACJ,KAAK,CAAC;MACjC;IACF,CAAC;IACDC,UAAUA,CAACD,KAAK,EAAE;MAChB;MACA,OAAO,IAAI,CAAChB,cAAc,CAACqB,QAAQ,CAACL,KAAK,CAAC;IAC5C;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}