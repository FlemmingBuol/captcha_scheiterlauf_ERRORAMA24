{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport p5 from 'p5';\nexport default {\n  name: \"Tilecaptcha\",\n  data() {\n    return {\n      wordsArray: [\"Flaschen\", \"Gabeln\", \"Äpfel\", \"Autos\", \"Katzen\"],\n      randomWord: \"\",\n      gridSize: 9,\n      // Define grid size\n      cellSize: 0,\n      grid: []\n    };\n  },\n  mounted() {\n    this.chooseRandomWord();\n    this.initializeCanvas();\n  },\n  methods: {\n    chooseRandomWord() {\n      const randomIndex = Math.floor(Math.random() * this.wordsArray.length);\n      this.randomWord = this.wordsArray[randomIndex];\n    },\n    redirectToError() {\n      // Redirect to /error route\n      this.$router.push('/error');\n    },\n    initializeCanvas() {\n      // Initialize p5.js canvas\n      this.cellSize = this.$refs.canvasContainer.clientWidth / this.gridSize;\n      const sketch = p => {\n        let img;\n        p.preload = () => {\n          // Load a random image from a directory\n          const randomIndex = Math.floor(p.random(1, 3)); // Adjust the range based on your image filenames\n          img = p.loadImage('/src/assets/IMG_' + randomIndex + '.jpg'); // Adjust the path to your image directory\n        };\n        p.setup = () => {\n          const canvas = p.createCanvas(this.$refs.canvasContainer.clientWidth, this.$refs.canvasContainer.clientHeight);\n          canvas.parent('canvasContainer');\n\n          // Create grid cells\n          for (let y = 0; y < this.gridSize; y++) {\n            for (let x = 0; x < this.gridSize; x++) {\n              const cellImg = img.get(x * this.cellSize, y * this.cellSize, this.cellSize, this.cellSize);\n              this.grid.push(new GridCell(x, y, this.cellSize, cellImg));\n            }\n          }\n        };\n        p.draw = () => {\n          p.background(255);\n\n          // Display grid cells\n          for (let cell of this.grid) {\n            cell.display(p);\n          }\n        };\n        p.mouseClicked = () => {\n          // Check which cell was clicked\n          for (let cell of this.grid) {\n            if (cell.contains(p.mouseX, p.mouseY)) {\n              cell.handleClick();\n              break;\n            }\n          }\n        };\n      };\n      new p5(sketch);\n    }\n  }\n};\nclass GridCell {\n  constructor(x, y, size, img) {\n    this.x = x * size;\n    this.y = y * size;\n    this.size = size;\n    this.img = img;\n    this.clicked = false;\n  }\n  display(p) {\n    p.stroke(0);\n    if (this.clicked) {\n      p.fill(200);\n      p.image(this.img, this.x + this.size / 4, this.y + this.size / 4, this.size / 2, this.size / 2);\n    } else {\n      p.fill(255);\n      p.image(this.img, this.x, this.y, this.size, this.size);\n    }\n  }\n  contains(px, py) {\n    return px > this.x && px < this.x + this.size && py > this.y && py < this.y + this.size;\n  }\n  handleClick() {\n    this.clicked = !this.clicked;\n  }\n}","map":{"version":3,"names":["p5","name","data","wordsArray","randomWord","gridSize","cellSize","grid","mounted","chooseRandomWord","initializeCanvas","methods","randomIndex","Math","floor","random","length","redirectToError","$router","push","$refs","canvasContainer","clientWidth","sketch","p","img","preload","loadImage","setup","canvas","createCanvas","clientHeight","parent","y","x","cellImg","get","GridCell","draw","background","cell","display","mouseClicked","contains","mouseX","mouseY","handleClick","constructor","size","clicked","stroke","fill","image","px","py"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Tilecaptcha.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div>\r\n        Tilecaptcha\r\n      </div>\r\n      <div class=\"InputandButtons\">\r\n        Wähle die Kacheln aus, auf denen <span id=\"randomWord\">{{ randomWord }}</span> zu sehen sind.\r\n        <button @click=\"redirectToError\">Ich bin kein Roboter</button>\r\n      </div>\r\n      <div ref=\"canvasContainer\"></div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import p5 from 'p5';\r\n  export default {\r\n    name: \"Tilecaptcha\",\r\n    data() {\r\n      return {\r\n        wordsArray: [\"Flaschen\", \"Gabeln\", \"Äpfel\", \"Autos\", \"Katzen\"],\r\n        randomWord: \"\",\r\n        gridSize: 9, // Define grid size\r\n        cellSize: 0,\r\n        grid: [],\r\n      };\r\n    },\r\n    mounted() {\r\n      this.chooseRandomWord();\r\n      this.initializeCanvas();\r\n    },\r\n    methods: {\r\n      chooseRandomWord() {\r\n        const randomIndex = Math.floor(Math.random() * this.wordsArray.length);\r\n        this.randomWord = this.wordsArray[randomIndex];\r\n      },\r\n      redirectToError() {\r\n        // Redirect to /error route\r\n        this.$router.push('/error');\r\n      },\r\n      initializeCanvas() {\r\n        // Initialize p5.js canvas\r\n        this.cellSize = this.$refs.canvasContainer.clientWidth / this.gridSize;\r\n        const sketch = p => {\r\n          let img;\r\n  \r\n          p.preload = () => {\r\n            // Load a random image from a directory\r\n            const randomIndex = Math.floor(p.random(1, 3)); // Adjust the range based on your image filenames\r\n            img = p.loadImage('/src/assets/IMG_' + randomIndex + '.jpg'); // Adjust the path to your image directory\r\n          };\r\n  \r\n          p.setup = () => {\r\n            const canvas = p.createCanvas(this.$refs.canvasContainer.clientWidth, this.$refs.canvasContainer.clientHeight);\r\n            canvas.parent('canvasContainer');\r\n  \r\n            // Create grid cells\r\n            for (let y = 0; y < this.gridSize; y++) {\r\n              for (let x = 0; x < this.gridSize; x++) {\r\n                const cellImg = img.get(x * this.cellSize, y * this.cellSize, this.cellSize, this.cellSize);\r\n                this.grid.push(new GridCell(x, y, this.cellSize, cellImg));\r\n              }\r\n            }\r\n          };\r\n  \r\n          p.draw = () => {\r\n            p.background(255);\r\n  \r\n            // Display grid cells\r\n            for (let cell of this.grid) {\r\n              cell.display(p);\r\n            }\r\n          };\r\n  \r\n          p.mouseClicked = () => {\r\n            // Check which cell was clicked\r\n            for (let cell of this.grid) {\r\n              if (cell.contains(p.mouseX, p.mouseY)) {\r\n                cell.handleClick();\r\n                break;\r\n              }\r\n            }\r\n          };\r\n        };\r\n  \r\n        new p5(sketch);\r\n      },\r\n    },\r\n  };\r\n  \r\n  class GridCell {\r\n    constructor(x, y, size, img) {\r\n      this.x = x * size;\r\n      this.y = y * size;\r\n      this.size = size;\r\n      this.img = img;\r\n      this.clicked = false;\r\n    }\r\n  \r\n    display(p) {\r\n      p.stroke(0);\r\n      if (this.clicked) {\r\n        p.fill(200);\r\n        p.image(this.img, this.x + this.size / 4, this.y + this.size / 4, this.size / 2, this.size / 2);\r\n      } else {\r\n        p.fill(255);\r\n        p.image(this.img, this.x, this.y, this.size, this.size);\r\n      }\r\n    }\r\n  \r\n    contains(px, py) {\r\n      return px > this.x && px < this.x + this.size && py > this.y && py < this.y + this.size;\r\n    }\r\n  \r\n    handleClick() {\r\n      this.clicked = !this.clicked;\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #canvasContainer {\r\n    display: inline-block;\r\n  }\r\n  </style>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}