{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"sketchWindow\"\n};\nconst _hoisted_2 = {\n  class: \"InputandButtons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */)]), _createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.inputValue = $event),\n    placeholder: \"Geben Sie den Text ein\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.inputValue]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.redirectToError && $options.redirectToError(...args))\n  }, \"Ich bin kein Roboter\")])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_hoisted_2","type","_cache","$event","_ctx","inputValue","placeholder","onClick","args","$options","redirectToError"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Standartcaptcha.vue"],"sourcesContent":["<template>\r\n  <div>\r\n      <div ref=\"sketchWindow\"></div>\r\n  </div>\r\n  <div class=\"InputandButtons\">\r\n      <input type=\"text\" v-model=\"inputValue\" placeholder=\"Geben Sie den Text ein\">\r\n      <button @click=\"redirectToError\">Ich bin kein Roboter</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport p5 from 'p5'; // Ensure 'p5' is correctly imported\r\n\r\nexport default {\r\n  name: 'Standartcaptcha',\r\n  mounted() {\r\n      const container = this.$refs.sketchWindow;\r\n      new p5(sketch => {\r\n          let letters = []; // Array to store letters\r\n\r\n          sketch.setup = () => {\r\n              sketch.createCanvas(500, 200).parent(container);\r\n              sketch.background(250);\r\n              sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\r\n              \r\n              const numLetters = 5;\r\n              const letterSpacing = sketch.width / (numLetters + 1); // Calculate spacing between letters\r\n              for (let i = 0; i < numLetters; i++) { // Generate 5 random letters\r\n                  const randomCharCode = sketch.floor(sketch.random(65, 91)); // Random ASCII code for uppercase letters\r\n                  const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\r\n                  const x = (i + 1) * letterSpacing; // Calculate x position based on index and spacing\r\n                  const y = sketch.height / 2 + sketch.random(-sketch.height * 0.15, sketch.height * 0.15); // Randomly offset vertically\r\n                  letters.push({ letter: randomLetter, x, y });\r\n              }\r\n          };\r\n\r\n          sketch.draw = () => {\r\n              sketch.background(250); // Clear background\r\n              for (let i = 0; i < letters.length; i++) {\r\n                  const { letter, x, y } = letters[i];\r\n                  sketch.text(letter, x, y);\r\n              }\r\n          };\r\n      });\r\n  },\r\n  methods: {\r\n      redirectToError() {\r\n          // Redirect to /error route\r\n          this.$router.push('/error');\r\n      }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;EAEWA,GAAG,EAAC;AAAc;;EAEtBC,KAAK,EAAC;AAAiB;;uBAJ9BC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CAEM,cADFA,mBAAA,CAA8B,OAA9BC,UAA8B,8B,GAElCD,mBAAA,CAGM,OAHNE,UAGM,G,gBAFFF,mBAAA,CAA6E;IAAtEG,IAAI,EAAC,MAAM;IALxB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAKkCC,IAAA,CAAAC,UAAU,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAxBF,IAAA,CAAAC,UAAU,E,GACtCP,mBAAA,CAA8D;IAArDS,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;KAAE,sBAAoB,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}