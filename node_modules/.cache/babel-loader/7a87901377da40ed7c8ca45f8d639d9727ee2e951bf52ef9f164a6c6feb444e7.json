{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport p5 from 'p5'; // Import 'p5' library\n\nexport default {\n  name: 'Standartcaptcha',\n  data() {\n    return {\n      inputValue: '',\n      // Initialize inputValue data property\n      fonts: [require('@/assets/Barriecito/Barriecito-Regular.ttf'), require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'), require('@/assets/Roboto/Roboto-Regular.ttf')]\n    };\n  },\n  mounted() {\n    const container = this.$refs.sketchWindow;\n    new p5(sketch => {\n      let letters = []; // Array to store unique letters\n      let circleX, circleY, circleRadius; // Variables for circle position and radius\n      let randowidth = Math.floor(Math.random() * 500 + 500);\n      sketch.setup = () => {\n        const canvas = sketch.createCanvas(randowidth + 300, 300).parent(container);\n        sketch.background(250);\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\n\n        // Generate random circle position and radius\n        circleX = sketch.width / 2 + sketch.random(-40, 40);\n        circleY = sketch.height / 2 + sketch.random(-40, 40);\n        circleRadius = sketch.random(100, 300);\n        sketch.push();\n        sketch.fill(160); // Set fill color to white\n        sketch.circle(circleX, circleY, circleRadius); // Draw circle with random position and radius\n        sketch.pop();\n\n        // Generate unique letters\n        const uniqueLetters = new Set(); // Using a Set to ensure uniqueness\n        while (uniqueLetters.size < Math.floor(Math.random() * 5 + 10)) {\n          const randomCharCode = sketch.floor(sketch.random(97, 123)); // Random ASCII code for lowercase letters\n          const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\n          uniqueLetters.add(randomLetter); // Add unique letter to the set\n        }\n\n        // Assign fonts and sizes to each letter\n        const uniqueLettersArray = Array.from(uniqueLetters); // Convert set to array\n        for (let i = 0; i < uniqueLettersArray.length; i++) {\n          const letter = uniqueLettersArray[i];\n          const x = (i + 1) * (sketch.width / (uniqueLettersArray.length + 1)); // Equally distribute letters horizontally\n          const y = sketch.height / 2 + sketch.random(-20, 20); // Center vertically\n          const fontIndex = Math.floor(Math.random() * this.fonts.length); // Randomly select a font\n          const selectedFont = sketch.loadFont(this.fonts[fontIndex]); // Load the selected font\n          const fontSize = 80 + sketch.random(-40, 40);\n          letters.push({\n            letter,\n            x,\n            y,\n            font: selectedFont,\n            fontSize\n          });\n        }\n\n        // Draw random lines across the canvas\n        const numLines = sketch.random(2, 5); // Random number of lines between 2 and 5\n        for (let i = 0; i < numLines; i++) {\n          const startX = sketch.random(sketch.width);\n          const startY = sketch.random(sketch.height);\n          const endX = sketch.random(sketch.width);\n          const endY = sketch.random(sketch.height);\n          sketch.line(startX, startY, endX, endY);\n        }\n        sketch.noLoop();\n        sketch.redraw();\n      };\n      sketch.draw = () => {\n        // Draw letters\n        for (let i = 0; i < letters.length; i++) {\n          const {\n            letter,\n            x,\n            y,\n            font,\n            fontSize\n          } = letters[i];\n          sketch.textSize(fontSize);\n          sketch.textFont(font); // Set font for the current letter\n          // Set font size for the current letter\n          sketch.text(letter, x, y);\n        }\n\n        // Apply Perlin noise to shift pixels slightly\n        for (let x = 0; x < 500; x++) {\n          for (let y = 0; y < 300; y++) {\n            const noiseVal = sketch.noise(x * 0.02, y * 0.02);\n            const shiftX = (noiseVal - 0.5) * 10;\n            const shiftY = (noiseVal - 0.5) * 5;\n            const pixelColor = sketch.get(x, y);\n            sketch.set(x + shiftX, y + shiftY, pixelColor);\n          }\n        }\n        sketch.updatePixels();\n      };\n    });\n  },\n  methods: {\n    redirectToError() {\n      // Redirect to /error route\n      this.$router.push('/error');\n    }\n  }\n};","map":{"version":3,"names":["p5","name","data","inputValue","fonts","require","mounted","container","$refs","sketchWindow","sketch","letters","circleX","circleY","circleRadius","randowidth","Math","floor","random","setup","canvas","createCanvas","parent","background","textAlign","CENTER","width","height","push","fill","circle","pop","uniqueLetters","Set","size","randomCharCode","randomLetter","String","fromCharCode","add","uniqueLettersArray","Array","from","i","length","letter","x","y","fontIndex","selectedFont","loadFont","fontSize","font","numLines","startX","startY","endX","endY","line","noLoop","redraw","draw","textSize","textFont","text","noiseVal","noise","shiftX","shiftY","pixelColor","get","set","updatePixels","methods","redirectToError","$router"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Portfolios\\captchascheiterlauf\\captchascheiterlauf\\captcha_scheiterlauf_ERRORAMA24\\src\\components\\Standartcaptchavar.vue"],"sourcesContent":["<template>\r\n    <div class=\"p5state\">\r\n    <div>\r\n        <div class =\"Canvasstyling\" ref=\"sketchWindow\"></div>\r\n    </div>\r\n    <div class=\"InputandButtons\">\r\n      <input type=\"text\" v-model=\"inputValue\" placeholder=\"Enter text\">\r\n      <button @click=\"redirectToError\">I'm not a robot</button>\r\n    </div>\r\n</div>\r\n  </template>\r\n  \r\n  <script>\r\n  import p5 from 'p5'; // Import 'p5' library\r\n  \r\n  export default {\r\n    name: 'Standartcaptcha',\r\n    data() {\r\n      return {\r\n        inputValue: '', // Initialize inputValue data property\r\n        fonts: [\r\n          require('@/assets/Barriecito/Barriecito-Regular.ttf'),\r\n          require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'),\r\n          require('@/assets/Roboto/Roboto-Regular.ttf')\r\n        ]\r\n      };\r\n    },\r\n    mounted() {\r\n      const container = this.$refs.sketchWindow;\r\n  \r\n      new p5(sketch => {\r\n        let letters = []; // Array to store unique letters\r\n        let circleX, circleY, circleRadius; // Variables for circle position and radius\r\n  let randowidth = Math.floor(Math.random()*500 + 500)\r\n        sketch.setup = () => {\r\n\r\n          const canvas = sketch.createCanvas(randowidth+300, 300).parent(container);\r\n          sketch.background(250);\r\n          sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\r\n  \r\n          // Generate random circle position and radius\r\n          circleX = sketch.width / 2 + sketch.random(-40, 40);\r\n          circleY = sketch.height / 2 + sketch.random(-40, 40);\r\n          circleRadius = sketch.random(100, 300);\r\n  \r\n          sketch.push();\r\n          sketch.fill(160); // Set fill color to white\r\n          sketch.circle(circleX, circleY, circleRadius); // Draw circle with random position and radius\r\n          sketch.pop();\r\n  \r\n          // Generate unique letters\r\n          const uniqueLetters = new Set(); // Using a Set to ensure uniqueness\r\n          while (uniqueLetters.size < Math.floor(Math.random()*5+10)) {\r\n            const randomCharCode = sketch.floor(sketch.random(97, 123)); // Random ASCII code for lowercase letters\r\n            const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\r\n            uniqueLetters.add(randomLetter); // Add unique letter to the set\r\n          }\r\n  \r\n          // Assign fonts and sizes to each letter\r\n          const uniqueLettersArray = Array.from(uniqueLetters); // Convert set to array\r\n          for (let i = 0; i < uniqueLettersArray.length; i++) {\r\n            const letter = uniqueLettersArray[i];\r\n            const x = (i + 1) * (sketch.width / (uniqueLettersArray.length + 1)); // Equally distribute letters horizontally\r\n            const y = sketch.height / 2 + sketch.random(-20, 20); // Center vertically\r\n            const fontIndex = Math.floor(Math.random() * this.fonts.length); // Randomly select a font\r\n            const selectedFont = sketch.loadFont(this.fonts[fontIndex]); // Load the selected font\r\n            const fontSize = 80 + sketch.random(-40, 40);\r\n            letters.push({ letter, x, y, font: selectedFont, fontSize });\r\n          }\r\n  \r\n          // Draw random lines across the canvas\r\n          const numLines = sketch.random(2, 5); // Random number of lines between 2 and 5\r\n          for (let i = 0; i < numLines; i++) {\r\n            const startX = sketch.random(sketch.width);\r\n            const startY = sketch.random(sketch.height);\r\n            const endX = sketch.random(sketch.width);\r\n            const endY = sketch.random(sketch.height);\r\n            sketch.line(startX, startY, endX, endY);\r\n          }\r\n  \r\n          sketch.noLoop()\r\n          sketch.redraw()\r\n        };\r\n  \r\n        sketch.draw = () => {\r\n          // Draw letters\r\n          for (let i = 0; i < letters.length; i++) {\r\n            const { letter, x, y, font, fontSize } = letters[i];\r\n            sketch.textSize(fontSize);\r\n            sketch.textFont(font); // Set font for the current letter\r\n            // Set font size for the current letter\r\n            sketch.text(letter, x, y);\r\n          }\r\n  \r\n          // Apply Perlin noise to shift pixels slightly\r\n          for (let x = 0; x < 500; x++) {\r\n            for (let y = 0; y < 300; y++) {\r\n              const noiseVal = sketch.noise(x * 0.02, y * 0.02);\r\n              const shiftX = (noiseVal - 0.5) * 10;\r\n              const shiftY = (noiseVal - 0.5) * 5;\r\n              const pixelColor = sketch.get(x, y);\r\n              sketch.set(x + shiftX, y + shiftY, pixelColor);\r\n            }\r\n          }\r\n  \r\n          sketch.updatePixels();\r\n        };\r\n      });\r\n    },\r\n    methods: {\r\n      redirectToError() {\r\n        // Redirect to /error route\r\n        this.$router.push('/error');\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style>\r\n.Canvasstyling {\r\nborder: 2px;\r\nborder-radius: 3px;\r\nborder-color: black;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}