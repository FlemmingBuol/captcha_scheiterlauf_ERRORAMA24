{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"randomWord\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createElementVNode(\"span\", _hoisted_1, _toDisplayString($data.randomWord), 1 /* TEXT */)]), _createElementVNode(\"div\", null, \" Neuer Versuch in \" + _toDisplayString($data.countdown), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["id","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_toDisplayString","$data","randomWord","countdown"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Errorstate.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <span id=\"randomWord\">{{ randomWord }}</span>\r\n  </div>\r\n  <div>\r\n    Neuer Versuch in {{ countdown }}\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Errorstate',\r\n  data() {\r\n    return {\r\n      wordsArray: [\"Versuchen Sie es noch einmal\", \"Fehler! Fehler! Fehler!\", \"Falsche Antwort, wieder einmal\", \"Versuchst du es Ã¼berhaupt?\", \"Damit kann ich nichts anfangen\", \"Also doch ein Roboter\", \"Juckt mich nicht\", \"Knapp daneben\", \"Wenns beim ersten Mal nicht klappt, try, try again\"],\r\n      randomWord: \"\",\r\n      countdown: 5,\r\n      timer: null\r\n    };\r\n  },\r\n  methods: {\r\n    setRandomWord() {\r\n      const randomIndex = Math.floor(Math.random() * this.wordsArray.length);\r\n      this.randomWord = this.wordsArray[randomIndex];\r\n    }\r\n  },\r\n  mounted() {\r\n    this.setRandomWord(); // Set initial random word\r\n    this.timer = setInterval(() => {\r\n      if (this.countdown > 0) {\r\n        this.countdown--;\r\n      } else {\r\n        clearInterval(this.timer);\r\n        this.$router.push('/'); // Assuming '/homeview' is the route for Homeview\r\n      }\r\n    }, 1000); // Update countdown every second\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.timer);\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";;EAEUA,EAAE,EAAC;AAAY;;uBAFzBC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CAEM,cADJA,mBAAA,CAA6C,QAA7CC,UAA6C,EAAAC,gBAAA,CAApBC,KAAA,CAAAC,UAAU,iB,GAErCJ,mBAAA,CAEM,aAFD,oBACc,GAAAE,gBAAA,CAAGC,KAAA,CAAAE,SAAS,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}