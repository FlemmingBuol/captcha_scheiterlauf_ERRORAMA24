{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport p5 from 'p5'; // Ensure 'p5' is correctly imported\n\nexport default {\n  name: 'Standartcaptcha',\n  data() {\n    return {\n      fonts: [require('@/assets/Barriecito/Barriecito-Regular.ttf'), require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'), require('@/assets/Roboto/Roboto-Regular.ttf')] // Array of font file paths\n    };\n  },\n  mounted() {\n    const container = this.$refs.sketchWindow;\n    const numLetters = 5; // Number of letters to generate\n\n    let letters = []; // Array to store letters\n    let circleX, circleY, circleRadius; // Variables for circle position and radius\n\n    // Generate random letters and positions\n    for (let i = 0; i < numLetters; i++) {\n      const randomCharCode = Math.floor(Math.random() * (122 - 97) + 97); // Random ASCII code for lowercase letters\n      const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\n      const x = Math.random() * 500; // Random x position\n      const y = 150 + Math.random() * 30; // Random y position\n      const fontIndex = Math.floor(Math.random() * this.fonts.length); // Randomly select a font\n      const selectedFont = new p5.Font(this.fonts[fontIndex]); // Load the selected font\n      const fontSize = 35 + 5 * i; // Increase font size by 5 for each letter\n      letters.push({\n        letter: randomLetter,\n        x,\n        y,\n        font: selectedFont,\n        fontSize\n      });\n    }\n\n    // Generate random circle position and radius\n    circleX = Math.random() * 500;\n    circleY = 150 + Math.random() * 150;\n    circleRadius = Math.random() * 200 + 100;\n    new p5(sketch => {\n      sketch.setup = () => {\n        sketch.createCanvas(500, 300).parent(container);\n        sketch.background(250);\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\n\n        // Draw random lines across the canvas just once\n        const numLines = Math.floor(Math.random() * 4) + 2; // Random number of lines between 2 and 5\n        for (let i = 0; i < numLines; i++) {\n          const startX = Math.random() * 500;\n          const startY = Math.random() * 300;\n          const endX = Math.random() * 500;\n          const endY = Math.random() * 300;\n          sketch.line(startX, startY, endX, endY);\n        }\n      };\n      sketch.draw = () => {\n        // Draw black circle\n        sketch.fill(0); // Set fill color to black\n        sketch.circle(circleX, circleY, circleRadius); // Draw circle with random position and radius\n\n        // Draw letters\n        for (let i = 0; i < letters.length; i++) {\n          const {\n            letter,\n            x,\n            y,\n            font,\n            fontSize\n          } = letters[i];\n          sketch.textFont(font); // Set font for the current letter\n          sketch.textSize(fontSize); // Set font size for the current letter\n          sketch.text(letter, x, y);\n        }\n\n        // Apply Perlin noise to shift pixels slightly\n        for (let x = 0; x < 500; x++) {\n          for (let y = 0; y < 300; y++) {\n            const noiseVal = sketch.noise(x * 0.01, y * 0.01);\n            const shiftX = (noiseVal - 0.5) * 5;\n            const shiftY = (noiseVal - 0.5) * 5;\n            const pixelColor = sketch.get(x, y);\n            sketch.set(x + shiftX, y + shiftY, pixelColor);\n          }\n        }\n        sketch.updatePixels();\n      };\n    });\n  },\n  methods: {\n    redirectToError() {\n      // Redirect to /error route\n      this.$router.push('/error');\n    }\n  }\n};","map":{"version":3,"names":["p5","name","data","fonts","require","mounted","container","$refs","sketchWindow","numLetters","letters","circleX","circleY","circleRadius","i","randomCharCode","Math","floor","random","randomLetter","String","fromCharCode","x","y","fontIndex","length","selectedFont","Font","fontSize","push","letter","font","sketch","setup","createCanvas","parent","background","textAlign","CENTER","numLines","startX","startY","endX","endY","line","draw","fill","circle","textFont","textSize","text","noiseVal","noise","shiftX","shiftY","pixelColor","get","set","updatePixels","methods","redirectToError","$router"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Standartcaptcha.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div ref=\"sketchWindow\"></div>\r\n  </div>\r\n  <div class=\"InputandButtons\">\r\n    <input type=\"text\" v-model=\"inputValue\" placeholder=\"Geben Sie den Text ein\">\r\n    <button @click=\"redirectToError\">Ich bin kein Roboter</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport p5 from 'p5'; // Ensure 'p5' is correctly imported\r\n\r\nexport default {\r\n  name: 'Standartcaptcha',\r\n  data() {\r\n    return {\r\n      fonts: [\r\n        require('@/assets/Barriecito/Barriecito-Regular.ttf'),\r\n        require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'),\r\n        require('@/assets/Roboto/Roboto-Regular.ttf')\r\n      ] // Array of font file paths\r\n    };\r\n  },\r\n  mounted() {\r\n    const container = this.$refs.sketchWindow;\r\n    const numLetters = 5; // Number of letters to generate\r\n\r\n    let letters = []; // Array to store letters\r\n    let circleX, circleY, circleRadius; // Variables for circle position and radius\r\n\r\n    // Generate random letters and positions\r\n    for (let i = 0; i < numLetters; i++) {\r\n      const randomCharCode = Math.floor(Math.random() * (122 - 97) + 97); // Random ASCII code for lowercase letters\r\n      const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\r\n      const x = Math.random() * 500; // Random x position\r\n      const y = 150 + Math.random() * 30; // Random y position\r\n      const fontIndex = Math.floor(Math.random() * this.fonts.length); // Randomly select a font\r\n      const selectedFont = new p5.Font(this.fonts[fontIndex]); // Load the selected font\r\n      const fontSize = 35 + 5 * i; // Increase font size by 5 for each letter\r\n      letters.push({ letter: randomLetter, x, y, font: selectedFont, fontSize });\r\n    }\r\n\r\n    // Generate random circle position and radius\r\n    circleX = Math.random() * 500;\r\n    circleY = 150 + Math.random() * 150;\r\n    circleRadius = Math.random() * 200 + 100;\r\n\r\n    new p5(sketch => {\r\n      sketch.setup = () => {\r\n        sketch.createCanvas(500, 300).parent(container);\r\n        sketch.background(250);\r\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\r\n\r\n        // Draw random lines across the canvas just once\r\n        const numLines = Math.floor(Math.random() * 4) + 2; // Random number of lines between 2 and 5\r\n        for (let i = 0; i < numLines; i++) {\r\n          const startX = Math.random() * 500;\r\n          const startY = Math.random() * 300;\r\n          const endX = Math.random() * 500;\r\n          const endY = Math.random() * 300;\r\n          sketch.line(startX, startY, endX, endY);\r\n        }\r\n      };\r\n\r\n      sketch.draw = () => {\r\n        // Draw black circle\r\n        sketch.fill(0); // Set fill color to black\r\n        sketch.circle(circleX, circleY, circleRadius); // Draw circle with random position and radius\r\n\r\n        // Draw letters\r\n        for (let i = 0; i < letters.length; i++) {\r\n          const { letter, x, y, font, fontSize } = letters[i];\r\n          sketch.textFont(font); // Set font for the current letter\r\n          sketch.textSize(fontSize); // Set font size for the current letter\r\n          sketch.text(letter, x, y);\r\n        }\r\n\r\n        // Apply Perlin noise to shift pixels slightly\r\n        for (let x = 0; x < 500; x++) {\r\n          for (let y = 0; y < 300; y++) {\r\n            const noiseVal = sketch.noise(x * 0.01, y * 0.01);\r\n            const shiftX = (noiseVal - 0.5) * 5;\r\n            const shiftY = (noiseVal - 0.5) * 5;\r\n            const pixelColor = sketch.get(x, y);\r\n            sketch.set(x + shiftX, y + shiftY, pixelColor);\r\n          }\r\n        }\r\n        sketch.updatePixels();\r\n      };\r\n    });\r\n  },\r\n  methods: {\r\n    redirectToError() {\r\n      // Redirect to /error route\r\n      this.$router.push('/error');\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}