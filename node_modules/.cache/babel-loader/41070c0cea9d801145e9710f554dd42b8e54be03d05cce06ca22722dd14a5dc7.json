{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      wordsArray: [\"Flaschen\", \"Gabeln\", \"Äpfel\", \"Autos\", \"Katzen\"],\n      randomWord: \"\",\n      images: [],\n      selectedImages: [] // Array to store selected image indices\n    };\n  },\n  mounted() {\n    this.chooseRandomWord();\n    this.loadImagesFromDirectory();\n  },\n  methods: {\n    chooseRandomWord() {\n      const randomIndex = Math.floor(Math.random() * this.wordsArray.length);\n      this.randomWord = this.wordsArray[randomIndex];\n    },\n    redirectToError() {\n      // Redirect to /error route\n      this.$router.push('/error');\n    },\n    loadImagesFromDirectory() {\n      // Import images from the assets directory\n      const imageContext = require.context('@/assets/3', false, /\\.(png|jpe?g|gif|svg)$/);\n      this.images = imageContext.keys().map(key => imageContext(key));\n    },\n    toggleImage(index) {\n      // Toggle the selected state of the image at the given index\n      if (this.isSelected(index)) {\n        this.selectedImages = this.selectedImages.filter(i => i !== index);\n      } else {\n        this.selectedImages.push(index);\n      }\n    },\n    isSelected(index) {\n      // Check if the image at the given index is selected\n      return this.selectedImages.includes(index);\n    },\n    redirectToError() {\n      // Redirect to /error route\n      this.$router.push('/error');\n    }\n  }\n};","map":{"version":3,"names":["data","wordsArray","randomWord","images","selectedImages","mounted","chooseRandomWord","loadImagesFromDirectory","methods","randomIndex","Math","floor","random","length","redirectToError","$router","push","imageContext","require","context","keys","map","key","toggleImage","index","isSelected","filter","i","includes"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Tilecaptchavar2.vue"],"sourcesContent":["<template>\r\n        <div class=\"tilestate\">\r\n\r\n    <div class=\"burger\">\r\n      <div class=\"image-gallery\">\r\n        <img v-for=\"(image, index) in images\"\r\n             :key=\"index\"\r\n             :src=\"image\"\r\n             :alt=\"'Image ' + (index + 1)\"\r\n             @click=\"toggleImage(index)\"\r\n             :style=\"{ opacity: isSelected(index) ? 0.5 : 1 }\" />\r\n      </div>\r\n    </div>\r\n    Wähle die Kacheln aus, auf denen <span id=\"randomWord\">{{ randomWord }}</span> zu sehen sind.\r\n    <div class=\"InputandButtons\">\r\n     \r\n      <button @click=\"redirectToError\">Ich bin kein Roboter</button>\r\n    </div>\r\n</div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        wordsArray: [\"Flaschen\", \"Gabeln\", \"Äpfel\", \"Autos\", \"Katzen\"],\r\n        randomWord: \"\",\r\n        images: [],\r\n        selectedImages: [], // Array to store selected image indices\r\n      };\r\n    },\r\n    mounted() {\r\n      this.chooseRandomWord();\r\n      this.loadImagesFromDirectory();\r\n    },\r\n    methods: {\r\n      chooseRandomWord() {\r\n          const randomIndex = Math.floor(Math.random() * this.wordsArray.length);\r\n          this.randomWord = this.wordsArray[randomIndex];\r\n        },\r\n        redirectToError() {\r\n          // Redirect to /error route\r\n          this.$router.push('/error');\r\n        },\r\n      loadImagesFromDirectory() {\r\n        // Import images from the assets directory\r\n        const imageContext = require.context('@/assets/3', false, /\\.(png|jpe?g|gif|svg)$/);\r\n        this.images = imageContext.keys().map(key => imageContext(key));\r\n      },\r\n      toggleImage(index) {\r\n        // Toggle the selected state of the image at the given index\r\n        if (this.isSelected(index)) {\r\n          this.selectedImages = this.selectedImages.filter(i => i !== index);\r\n        } else {\r\n          this.selectedImages.push(index);\r\n        }\r\n      },\r\n      isSelected(index) {\r\n        // Check if the image at the given index is selected\r\n        return this.selectedImages.includes(index);\r\n      },\r\n      redirectToError() {\r\n        // Redirect to /error route\r\n        this.$router.push('/error');\r\n      }\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .image-gallery {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    width: 30%;\r\n    box-sizing: border-box; /* Include padding and border in the element's total width */\r\n  }\r\n  \r\n  .image-gallery img {\r\n    flex: 0 0 calc(25% - 10px);\r\n    max-width: calc(25% - 10px);\r\n    max-height: calc(25vw - 10px);\r\n    object-fit: cover;\r\n    margin: 2px;\r\n    border-radius: 3px;\r\n  }\r\n  \r\n  </style>"],"mappings":";AAsBE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;MAC9DC,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE,EAAE;MACVC,cAAc,EAAE,EAAE,CAAE;IACtB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACC,uBAAuB,CAAC,CAAC;EAChC,CAAC;EACDC,OAAO,EAAE;IACPF,gBAAgBA,CAAA,EAAG;MACf,MAAMG,WAAU,GAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAI,IAAI,CAACX,UAAU,CAACY,MAAM,CAAC;MACtE,IAAI,CAACX,UAAS,GAAI,IAAI,CAACD,UAAU,CAACQ,WAAW,CAAC;IAChD,CAAC;IACDK,eAAeA,CAAA,EAAG;MAChB;MACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IAC7B,CAAC;IACHT,uBAAuBA,CAAA,EAAG;MACxB;MACA,MAAMU,YAAW,GAAIC,OAAO,CAACC,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE,wBAAwB,CAAC;MACnF,IAAI,CAAChB,MAAK,GAAIc,YAAY,CAACG,IAAI,CAAC,CAAC,CAACC,GAAG,CAACC,GAAE,IAAKL,YAAY,CAACK,GAAG,CAAC,CAAC;IACjE,CAAC;IACDC,WAAWA,CAACC,KAAK,EAAE;MACjB;MACA,IAAI,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC,EAAE;QAC1B,IAAI,CAACpB,cAAa,GAAI,IAAI,CAACA,cAAc,CAACsB,MAAM,CAACC,CAAA,IAAKA,CAAA,KAAMH,KAAK,CAAC;MACpE,OAAO;QACL,IAAI,CAACpB,cAAc,CAACY,IAAI,CAACQ,KAAK,CAAC;MACjC;IACF,CAAC;IACDC,UAAUA,CAACD,KAAK,EAAE;MAChB;MACA,OAAO,IAAI,CAACpB,cAAc,CAACwB,QAAQ,CAACJ,KAAK,CAAC;IAC5C,CAAC;IACDV,eAAeA,CAAA,EAAG;MAChB;MACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IAC7B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}