{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-363dc80c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, \" Tilecaptcha \", -1 /* HOISTED */));\nconst _hoisted_2 = {\n  class: \"InputandButtons\"\n};\nconst _hoisted_3 = {\n  id: \"randomWord\"\n};\nconst _hoisted_4 = {\n  ref: \"canvasContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createTextVNode(\" Wähle die Kacheln aus, auf denen \"), _createElementVNode(\"span\", _hoisted_3, _toDisplayString($data.randomWord), 1 /* TEXT */), _createTextVNode(\" zu sehen sind. \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.redirectToError && $options.redirectToError(...args))\n  }, \"Ich bin kein Roboter\")]), _createElementVNode(\"div\", _hoisted_4, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["_createElementVNode","class","id","ref","_createElementBlock","_hoisted_1","_hoisted_2","_createTextVNode","_hoisted_3","_toDisplayString","$data","randomWord","onClick","_cache","args","$options","redirectToError","_hoisted_4"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Tilecaptcha.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div>\r\n        Tilecaptcha\r\n      </div>\r\n      <div class=\"InputandButtons\">\r\n        Wähle die Kacheln aus, auf denen <span id=\"randomWord\">{{ randomWord }}</span> zu sehen sind.\r\n        <button @click=\"redirectToError\">Ich bin kein Roboter</button>\r\n      </div>\r\n      <div ref=\"canvasContainer\"></div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: \"Tilecaptcha\",\r\n    data() {\r\n      return {\r\n        wordsArray: [\"Flaschen\", \"Gabeln\", \"Äpfel\", \"Autos\", \"Katzen\"],\r\n        randomWord: \"\",\r\n        gridSize: 9, // Define grid size\r\n        cellSize: 0,\r\n        grid: [],\r\n      };\r\n    },\r\n    mounted() {\r\n      this.chooseRandomWord();\r\n      this.initializeCanvas();\r\n    },\r\n    methods: {\r\n      chooseRandomWord() {\r\n        const randomIndex = Math.floor(Math.random() * this.wordsArray.length);\r\n        this.randomWord = this.wordsArray[randomIndex];\r\n      },\r\n      redirectToError() {\r\n        // Redirect to /error route\r\n        this.$router.push('/error');\r\n      },\r\n      initializeCanvas() {\r\n        // Initialize p5.js canvas\r\n        this.cellSize = this.$refs.canvasContainer.clientWidth / this.gridSize;\r\n        const sketch = p => {\r\n          let img;\r\n  \r\n          p.preload = () => {\r\n            // Load a random image from a directory\r\n            const randomIndex = Math.floor(p.random(1, 3)); // Adjust the range based on your image filenames\r\n            img = p.loadImage('/../assets/IMG_' + randomIndex + '.jpg'); // Adjust the path to your image directory\r\n          };\r\n  \r\n          p.setup = () => {\r\n            const canvas = p.createCanvas(this.$refs.canvasContainer.clientWidth, this.$refs.canvasContainer.clientHeight);\r\n            canvas.parent('canvasContainer');\r\n  \r\n            // Create grid cells\r\n            for (let y = 0; y < this.gridSize; y++) {\r\n              for (let x = 0; x < this.gridSize; x++) {\r\n                const cellImg = img.get(x * this.cellSize, y * this.cellSize, this.cellSize, this.cellSize);\r\n                this.grid.push(new GridCell(x, y, this.cellSize, cellImg));\r\n              }\r\n            }\r\n          };\r\n  \r\n          p.draw = () => {\r\n            p.background(255);\r\n  \r\n            // Display grid cells\r\n            for (let cell of this.grid) {\r\n              cell.display(p);\r\n            }\r\n          };\r\n  \r\n          p.mouseClicked = () => {\r\n            // Check which cell was clicked\r\n            for (let cell of this.grid) {\r\n              if (cell.contains(p.mouseX, p.mouseY)) {\r\n                cell.handleClick();\r\n                break;\r\n              }\r\n            }\r\n          };\r\n        };\r\n  \r\n        new p5(sketch);\r\n      },\r\n    },\r\n  };\r\n  \r\n  class GridCell {\r\n    constructor(x, y, size, img) {\r\n      this.x = x * size;\r\n      this.y = y * size;\r\n      this.size = size;\r\n      this.img = img;\r\n      this.clicked = false;\r\n    }\r\n  \r\n    display(p) {\r\n      p.stroke(0);\r\n      if (this.clicked) {\r\n        p.fill(200);\r\n        p.image(this.img, this.x + this.size / 4, this.y + this.size / 4, this.size / 2, this.size / 2);\r\n      } else {\r\n        p.fill(255);\r\n        p.image(this.img, this.x, this.y, this.size, this.size);\r\n      }\r\n    }\r\n  \r\n    contains(px, py) {\r\n      return px > this.x && px < this.x + this.size && py > this.y && py < this.y + this.size;\r\n    }\r\n  \r\n    handleClick() {\r\n      this.clicked = !this.clicked;\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #canvasContainer {\r\n    display: inline-block;\r\n  }\r\n  </style>\r\n  "],"mappings":";;gEAEMA,mBAAA,CAEM,aAFD,eAEL;;EACKC,KAAK,EAAC;AAAiB;;EACaC,EAAE,EAAC;AAAY;;EAGnDC,GAAG,EAAC;AAAiB;;uBAR5BC,mBAAA,CASM,cARJC,UAEM,EACNL,mBAAA,CAGM,OAHNM,UAGM,GARZC,gBAAA,CAKmC,oCACM,GAAAP,mBAAA,CAA6C,QAA7CQ,UAA6C,EAAAC,gBAAA,CAApBC,KAAA,CAAAC,UAAU,kBAN5EJ,gBAAA,CAMsF,kBAC9E,GAAAP,mBAAA,CAA8D;IAArDY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;KAAE,sBAAoB,E,GAEvDd,mBAAA,CAAiC,OAAjCiB,UAAiC,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}