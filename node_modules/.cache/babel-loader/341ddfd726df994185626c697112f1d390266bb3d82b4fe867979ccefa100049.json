{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      grid: [],\n      images: [] // Array to store image paths\n    };\n  },\n  mounted() {\n    this.loadImages();\n  },\n  methods: {\n    async loadImages() {\n      // Assuming you're using webpack and require.context to dynamically import images\n      const imagesContext = require.context('@/assets/', false, /\\.(jpg|jpeg|png|gif|svg)$/);\n      const images = imagesContext.keys().map(key => imagesContext(key));\n\n      // Randomly select 3 images\n      const randomImages = this.getRandomElements(images, 3);\n\n      // Randomly select one image from the 3\n      const randomImage = this.getRandomElement(randomImages);\n\n      // Split the random image into 16 equal sub-tiles\n      await this.splitImage(randomImage);\n    },\n    async splitImage(imageSrc) {\n      const image = new Image();\n      image.src = imageSrc;\n      await new Promise((resolve, reject) => {\n        image.onload = () => resolve();\n        image.onerror = error => reject(error);\n      });\n      const tileWidth = image.width / 4;\n      const tileHeight = image.height / 4;\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          this.grid.push({\n            src: imageSrc,\n            position: `-${j * tileWidth}px -${i * tileHeight}px`,\n            toggled: false\n          });\n        }\n      }\n    },\n    toggleTile(rowIndex, colIndex) {\n      const index = rowIndex * 4 + colIndex;\n      this.grid[index].toggled = !this.grid[index].toggled;\n    },\n    getRandomElements(array, count) {\n      const shuffled = array.sort(() => 0.5 - Math.random());\n      return shuffled.slice(0, count);\n    },\n    getRandomElement(array) {\n      return array[Math.floor(Math.random() * array.length)];\n    }\n  }\n};","map":{"version":3,"names":["data","grid","images","mounted","loadImages","methods","imagesContext","require","context","keys","map","key","randomImages","getRandomElements","randomImage","getRandomElement","splitImage","imageSrc","image","Image","src","Promise","resolve","reject","onload","onerror","error","tileWidth","width","tileHeight","height","i","j","push","position","toggled","toggleTile","rowIndex","colIndex","index","array","count","shuffled","sort","Math","random","slice","floor","length"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Tilecaptcha.vue"],"sourcesContent":["<template>\r\n  <div class=\"image-grid\">\r\n    <div\r\n      v-for=\"(row, rowIndex) in grid\"\r\n      :key=\"rowIndex\"\r\n      class=\"image-grid-row\"\r\n    >\r\n      <div\r\n        v-for=\"(tile, colIndex) in row\"\r\n        :key=\"colIndex\"\r\n        class=\"image-grid-tile\"\r\n        @click=\"toggleTile(rowIndex, colIndex)\"\r\n        :style=\"{ backgroundImage: `url(${tile.src})`, backgroundPosition: tile.position, opacity: tile.toggled ? 0.5 : 1 }\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      grid: [],\r\n      images: [], // Array to store image paths\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadImages();\r\n  },\r\n  methods: {\r\n    async loadImages() {\r\n      // Assuming you're using webpack and require.context to dynamically import images\r\n      const imagesContext = require.context('@/assets/', false, /\\.(jpg|jpeg|png|gif|svg)$/);\r\n      const images = imagesContext.keys().map(key => imagesContext(key));\r\n\r\n      // Randomly select 3 images\r\n      const randomImages = this.getRandomElements(images, 3);\r\n\r\n      // Randomly select one image from the 3\r\n      const randomImage = this.getRandomElement(randomImages);\r\n\r\n      // Split the random image into 16 equal sub-tiles\r\n      await this.splitImage(randomImage);\r\n    },\r\n    async splitImage(imageSrc) {\r\n      const image = new Image();\r\n      image.src = imageSrc;\r\n      await new Promise((resolve, reject) => {\r\n        image.onload = () => resolve();\r\n        image.onerror = (error) => reject(error);\r\n      });\r\n\r\n      const tileWidth = image.width / 4;\r\n      const tileHeight = image.height / 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          this.grid.push({\r\n            src: imageSrc,\r\n            position: `-${j * tileWidth}px -${i * tileHeight}px`,\r\n            toggled: false,\r\n          });\r\n        }\r\n      }\r\n    },\r\n    toggleTile(rowIndex, colIndex) {\r\n      const index = rowIndex * 4 + colIndex;\r\n      this.grid[index].toggled = !this.grid[index].toggled;\r\n    },\r\n    getRandomElements(array, count) {\r\n      const shuffled = array.sort(() => 0.5 - Math.random());\r\n      return shuffled.slice(0, count);\r\n    },\r\n    getRandomElement(array) {\r\n      return array[Math.floor(Math.random() * array.length)];\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.image-grid {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.image-grid-row {\r\n  display: flex;\r\n}\r\n.image-grid-tile {\r\n  width: 25%; /* 4 tiles in a row */\r\n  padding-bottom: 25%; /* To maintain square aspect ratio */\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  cursor: pointer;\r\n  transition: opacity 0.3s ease;\r\n}\r\n</style>\r\n"],"mappings":";AAmBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,MAAM,EAAE,EAAE,CAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,UAAUA,CAAA,EAAG;MACjB;MACA,MAAME,aAAY,GAAIC,OAAO,CAACC,OAAO,CAAC,WAAW,EAAE,KAAK,EAAE,2BAA2B,CAAC;MACtF,MAAMN,MAAK,GAAII,aAAa,CAACG,IAAI,CAAC,CAAC,CAACC,GAAG,CAACC,GAAE,IAAKL,aAAa,CAACK,GAAG,CAAC,CAAC;;MAElE;MACA,MAAMC,YAAW,GAAI,IAAI,CAACC,iBAAiB,CAACX,MAAM,EAAE,CAAC,CAAC;;MAEtD;MACA,MAAMY,WAAU,GAAI,IAAI,CAACC,gBAAgB,CAACH,YAAY,CAAC;;MAEvD;MACA,MAAM,IAAI,CAACI,UAAU,CAACF,WAAW,CAAC;IACpC,CAAC;IACD,MAAME,UAAUA,CAACC,QAAQ,EAAE;MACzB,MAAMC,KAAI,GAAI,IAAIC,KAAK,CAAC,CAAC;MACzBD,KAAK,CAACE,GAAE,GAAIH,QAAQ;MACpB,MAAM,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACrCL,KAAK,CAACM,MAAK,GAAI,MAAMF,OAAO,CAAC,CAAC;QAC9BJ,KAAK,CAACO,OAAM,GAAKC,KAAK,IAAKH,MAAM,CAACG,KAAK,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMC,SAAQ,GAAIT,KAAK,CAACU,KAAI,GAAI,CAAC;MACjC,MAAMC,UAAS,GAAIX,KAAK,CAACY,MAAK,GAAI,CAAC;MACnC,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,IAAI,CAAC/B,IAAI,CAACgC,IAAI,CAAC;YACbb,GAAG,EAAEH,QAAQ;YACbiB,QAAQ,EAAG,IAAGF,CAAA,GAAIL,SAAU,OAAMI,CAAA,GAAIF,UAAW,IAAG;YACpDM,OAAO,EAAE;UACX,CAAC,CAAC;QACJ;MACF;IACF,CAAC;IACDC,UAAUA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;MAC7B,MAAMC,KAAI,GAAIF,QAAO,GAAI,IAAIC,QAAQ;MACrC,IAAI,CAACrC,IAAI,CAACsC,KAAK,CAAC,CAACJ,OAAM,GAAI,CAAC,IAAI,CAAClC,IAAI,CAACsC,KAAK,CAAC,CAACJ,OAAO;IACtD,CAAC;IACDtB,iBAAiBA,CAAC2B,KAAK,EAAEC,KAAK,EAAE;MAC9B,MAAMC,QAAO,GAAIF,KAAK,CAACG,IAAI,CAAC,MAAM,GAAE,GAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;MACtD,OAAOH,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAEL,KAAK,CAAC;IACjC,CAAC;IACD1B,gBAAgBA,CAACyB,KAAK,EAAE;MACtB,OAAOA,KAAK,CAACI,IAAI,CAACG,KAAK,CAACH,IAAI,CAACC,MAAM,CAAC,IAAIL,KAAK,CAACQ,MAAM,CAAC,CAAC;IACxD;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}