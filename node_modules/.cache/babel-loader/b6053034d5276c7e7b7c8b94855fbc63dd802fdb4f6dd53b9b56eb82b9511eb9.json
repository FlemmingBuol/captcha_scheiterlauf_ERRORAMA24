{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"image-grid\"\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", null, \" Tilecaptcha \", -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"InputandButtons\"\n};\nconst _hoisted_5 = {\n  id: \"randomWord\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.grid, (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: rowIndex,\n      class: \"image-grid-row\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (tile, colIndex) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: colIndex,\n        class: \"image-grid-tile\",\n        onClick: $event => _ctx.toggleTile(rowIndex, colIndex),\n        style: _normalizeStyle({\n          backgroundImage: `url(${tile.src})`,\n          backgroundPosition: tile.position\n        })\n      }, null, 12 /* STYLE, PROPS */, _hoisted_2);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", null, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createTextVNode(\" Wähle die Kacheln aus, auf denen \"), _createElementVNode(\"span\", _hoisted_5, _toDisplayString(_ctx.randomWord), 1 /* TEXT */), _createTextVNode(\" zu sehen sind. \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.redirectToError && _ctx.redirectToError(...args))\n  }, \"Ich bin kein Roboter\")])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","id","_createElementBlock","_Fragment","_hoisted_1","_renderList","_ctx","grid","row","rowIndex","key","tile","colIndex","onClick","$event","toggleTile","style","_normalizeStyle","backgroundImage","src","backgroundPosition","position","_hoisted_2","_hoisted_3","_hoisted_4","_createTextVNode","_hoisted_5","_toDisplayString","randomWord","_cache","args","redirectToError"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Tilecaptcha.vue"],"sourcesContent":["<template>\r\n  <div class=\"image-grid\">\r\n    <div\r\n      v-for=\"(row, rowIndex) in grid\"\r\n      :key=\"rowIndex\"\r\n      class=\"image-grid-row\"\r\n    >\r\n      <div\r\n        v-for=\"(tile, colIndex) in row\"\r\n        :key=\"colIndex\"\r\n        class=\"image-grid-tile\"\r\n        @click=\"toggleTile(rowIndex, colIndex)\"\r\n        :style=\"{ backgroundImage: `url(${tile.src})`, backgroundPosition: tile.position }\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n    <div>\r\n      <div>\r\n        Tilecaptcha\r\n      </div>\r\n      <div class=\"InputandButtons\">\r\n        Wähle die Kacheln aus, auf denen <span id=\"randomWord\">{{ randomWord }}</span> zu sehen sind.\r\n        <button @click=\"redirectToError\">Ich bin kein Roboter</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    return {\r\n      imageSrc: '/path/to/image.jpg', // Update with the path to your image\r\n      grid: [],\r\n    },\r\n    name: \"Tilecaptcha\",\r\n    data() {\r\n      return {\r\n        wordsArray: [\"Flaschen\", \"Gabeln\", \"Äpfel\", \"Autos\", \"Katzen\"],\r\n        randomWord: \"\"\r\n      };\r\n    },\r\n    mounted() {\r\n      this.chooseRandomWord();\r\n    },\r\n    methods: {\r\n      chooseRandomWord() {\r\n        const randomIndex = Math.floor(Math.random() * this.wordsArray.length);\r\n        this.randomWord = this.wordsArray[randomIndex];\r\n      },\r\n      redirectToError() {\r\n        // Redirect to /error route\r\n        this.$router.push('/error');\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  "],"mappings":";;EACOA,KAAK,EAAC;AAAY;mBADzB;gCAiBMC,mBAAA,CAEM,aAFD,eAEL;;EACKD,KAAK,EAAC;AAAiB;;EACaE,EAAE,EAAC;AAAY;;uBArB9DC,mBAAA,CAAAC,SAAA,SACEH,mBAAA,CAcM,OAdNI,UAcM,I,kBAbJF,mBAAA,CAYMC,SAAA,QAdVE,WAAA,CAGgCC,IAAA,CAAAC,IAAI,EAHpC,CAGcC,GAAG,EAAEC,QAAQ;yBADvBP,mBAAA,CAYM;MAVHQ,GAAG,EAAED,QAAQ;MACdV,KAAK,EAAC;2BAENG,mBAAA,CAMOC,SAAA,QAbbE,WAAA,CAQmCG,GAAG,EARtC,CAQgBG,IAAI,EAAEC,QAAQ;2BADxBV,mBAAA,CAMO;QAJJQ,GAAG,EAAEE,QAAQ;QACdb,KAAK,EAAC,iBAAiB;QACtBc,OAAK,EAAAC,MAAA,IAAER,IAAA,CAAAS,UAAU,CAACN,QAAQ,EAAEG,QAAQ;QACpCI,KAAK,EAZdC,eAAA;UAAAC,eAAA,SAY0CP,IAAI,CAACQ,GAAG;UAAAC,kBAAA,EAAyBT,IAAI,CAACU;QAAQ;sCAZxFC,UAAA;;oCAgBItB,mBAAA,CAQM,cAPJuB,UAEM,EACNvB,mBAAA,CAGM,OAHNwB,UAGM,GAvBZC,gBAAA,CAoBmC,oCACM,GAAAzB,mBAAA,CAA6C,QAA7C0B,UAA6C,EAAAC,gBAAA,CAApBrB,IAAA,CAAAsB,UAAU,kBArB5EH,gBAAA,CAqBsF,kBAC9E,GAAAzB,mBAAA,CAA8D;IAArDa,OAAK,EAAAgB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAExB,IAAA,CAAAyB,eAAA,IAAAzB,IAAA,CAAAyB,eAAA,IAAAD,IAAA,CAAe;KAAE,sBAAoB,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}