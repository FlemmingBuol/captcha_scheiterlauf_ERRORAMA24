{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      images: [],\n      directories: [\"directory1\", \"directory2\", \"directory3\"]\n    };\n  },\n  mounted() {\n    this.loadImages();\n  },\n  methods: {\n    loadImages() {\n      const images = [];\n      this.directories.forEach(directory => {\n        const context = require.context(\"@/assets/\" + directory, false, /\\.(png|jpe?g|svg)$/);\n        const directoryImages = context.keys().map(key => ({\n          src: context(key),\n          name: key.split(\"/\").pop().split(\".\")[0],\n          selected: false\n        }));\n        images.push(...directoryImages);\n      });\n      this.images = this.shuffleArray(images).slice(0, 16); // Pick 16 random images\n    },\n    toggleImage(index) {\n      this.images[index].selected = !this.images[index].selected;\n    },\n    shuffleArray(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n  }\n};","map":{"version":3,"names":["data","images","directories","mounted","loadImages","methods","forEach","directory","context","require","directoryImages","keys","map","key","src","name","split","pop","selected","push","shuffleArray","slice","toggleImage","index","array","i","length","j","Math","floor","random"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Tilecaptcha.vue"],"sourcesContent":["<template>\r\n  <div class=\"image-grid\">\r\n    <div\r\n      v-for=\"(image, index) in images\"\r\n      :key=\"index\"\r\n      class=\"image-container\"\r\n      @click=\"toggleImage(index)\"\r\n    >\r\n      <img :src=\"image.src\" :alt=\"image.name\" class=\"grid-image\" />\r\n      <div v-if=\"image.selected\" class=\"overlay\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      images: [],\r\n      directories: [\"directory1\", \"directory2\", \"directory3\"],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadImages();\r\n  },\r\n  methods: {\r\n    loadImages() {\r\n      const images = [];\r\n      this.directories.forEach((directory) => {\r\n        const context = require.context(\"@/assets/\" + directory, false, /\\.(png|jpe?g|svg)$/);\r\n        const directoryImages = context.keys().map((key) => ({\r\n          src: context(key),\r\n          name: key.split(\"/\").pop().split(\".\")[0],\r\n          selected: false,\r\n        }));\r\n        images.push(...directoryImages);\r\n      });\r\n      this.images = this.shuffleArray(images).slice(0, 16); // Pick 16 random images\r\n    },\r\n    toggleImage(index) {\r\n      this.images[index].selected = !this.images[index].selected;\r\n    },\r\n    shuffleArray(array) {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n      return array;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.image-grid {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.image-container {\r\n  position: relative;\r\n  flex: 1 0 25%;\r\n  padding: 5px;\r\n}\r\n\r\n.grid-image {\r\n  width: 100%;\r\n  height: auto;\r\n  cursor: pointer;\r\n}\r\n\r\n.overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n</style>"],"mappings":";AAeA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY;IACxD,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACPD,UAAUA,CAAA,EAAG;MACX,MAAMH,MAAK,GAAI,EAAE;MACjB,IAAI,CAACC,WAAW,CAACI,OAAO,CAAEC,SAAS,IAAK;QACtC,MAAMC,OAAM,GAAIC,OAAO,CAACD,OAAO,CAAC,WAAU,GAAID,SAAS,EAAE,KAAK,EAAE,oBAAoB,CAAC;QACrF,MAAMG,eAAc,GAAIF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,GAAG,CAAEC,GAAG,KAAM;UACnDC,GAAG,EAAEN,OAAO,CAACK,GAAG,CAAC;UACjBE,IAAI,EAAEF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACxCE,QAAQ,EAAE;QACZ,CAAC,CAAC,CAAC;QACHjB,MAAM,CAACkB,IAAI,CAAC,GAAGT,eAAe,CAAC;MACjC,CAAC,CAAC;MACF,IAAI,CAACT,MAAK,GAAI,IAAI,CAACmB,YAAY,CAACnB,MAAM,CAAC,CAACoB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;IACxD,CAAC;IACDC,WAAWA,CAACC,KAAK,EAAE;MACjB,IAAI,CAACtB,MAAM,CAACsB,KAAK,CAAC,CAACL,QAAO,GAAI,CAAC,IAAI,CAACjB,MAAM,CAACsB,KAAK,CAAC,CAACL,QAAQ;IAC5D,CAAC;IACDE,YAAYA,CAACI,KAAK,EAAE;MAClB,KAAK,IAAIC,CAAA,GAAID,KAAK,CAACE,MAAK,GAAI,CAAC,EAAED,CAAA,GAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QACzC,MAAME,CAAA,GAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,KAAKL,CAAA,GAAI,CAAC,CAAC,CAAC;QAC7C,CAACD,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACG,CAAC,CAAC,IAAI,CAACH,KAAK,CAACG,CAAC,CAAC,EAAEH,KAAK,CAACC,CAAC,CAAC,CAAC;MAC7C;MACA,OAAOD,KAAK;IACd;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}