{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport p5 from 'p5'; // Ensure 'p5' is correctly imported\n\nexport default {\n  name: 'Standartcaptcha',\n  mounted() {\n    const container = this.$refs.sketchWindow;\n    const fonts = [font1, font2, font3]; // Array of font options\n\n    new p5(sketch => {\n      let letters = []; // Array to store letters\n      let selectedFont; // Variable to store selected font\n\n      sketch.preload = () => {\n        font1 = loadFont('@/assets/Barriecito/Barriecito-Regular.ttf');\n        font2 = loadFont('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf');\n        font3 = loadFont('@/assets/Roboto/Roboto-Regular.ttf');\n        selectedFont = sketch.random(fonts); // Select random font\n        sketch.textFont(selectedFont); // Set selected font\n      };\n      sketch.setup = () => {\n        sketch.createCanvas(500, 200).parent(container);\n        sketch.background(250);\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\n\n        const numLetters = 5;\n        const letterSpacing = sketch.width / (numLetters + 1); // Calculate spacing between letters\n        for (let i = 0; i < numLetters; i++) {\n          // Generate 5 random letters\n          const randomCharCode = sketch.floor(sketch.random(65, 91)); // Random ASCII code for uppercase letters\n          const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\n          const x = (i + 1) * letterSpacing; // Calculate x position based on index and spacing\n          const y = sketch.height / 2 + sketch.random(-sketch.height * 0.15, sketch.height * 0.1); // Randomly offset vertically\n          letters.push({\n            letter: randomLetter,\n            x,\n            y\n          });\n        }\n      };\n      sketch.draw = () => {\n        sketch.background(250); // Clear background\n        for (let i = 0; i < letters.length; i++) {\n          const {\n            letter,\n            x,\n            y\n          } = letters[i];\n          sketch.text(letter, x, y);\n        }\n      };\n    });\n  },\n  methods: {\n    redirectToError() {\n      // Redirect to /error route\n      this.$router.push('/error');\n    }\n  }\n};","map":{"version":3,"names":["p5","name","mounted","container","$refs","sketchWindow","fonts","font1","font2","font3","sketch","letters","selectedFont","preload","loadFont","random","textFont","setup","createCanvas","parent","background","textAlign","CENTER","numLetters","letterSpacing","width","i","randomCharCode","floor","randomLetter","String","fromCharCode","x","y","height","push","letter","draw","length","text","methods","redirectToError","$router"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Standartcaptcha.vue"],"sourcesContent":["<template>\r\n  <div>\r\n      <div ref=\"sketchWindow\"></div>\r\n  </div>\r\n  <div class=\"InputandButtons\">\r\n      <input type=\"text\" v-model=\"inputValue\" placeholder=\"Geben Sie den Text ein\">\r\n      <button @click=\"redirectToError\">Ich bin kein Roboter</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport p5 from 'p5'; // Ensure 'p5' is correctly imported\r\n\r\nexport default {\r\n  name: 'Standartcaptcha',\r\n  mounted() {\r\n      const container = this.$refs.sketchWindow;\r\n      const fonts = [font1, font2, font3]; // Array of font options\r\n      \r\n      new p5(sketch => {\r\n          let letters = []; // Array to store letters\r\n          let selectedFont; // Variable to store selected font\r\n\r\n          sketch.preload = () => {\r\n            font1 = loadFont('@/assets/Barriecito/Barriecito-Regular.ttf');\r\n            font2 = loadFont('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf');\r\n            font3 = loadFont('@/assets/Roboto/Roboto-Regular.ttf');\r\n              selectedFont = sketch.random(fonts); // Select random font\r\n              sketch.textFont(selectedFont); // Set selected font\r\n          };\r\n\r\n          sketch.setup = () => {\r\n              sketch.createCanvas(500, 200).parent(container);\r\n              sketch.background(250);\r\n              sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\r\n              \r\n              const numLetters = 5;\r\n              const letterSpacing = sketch.width / (numLetters + 1); // Calculate spacing between letters\r\n              for (let i = 0; i < numLetters; i++) { // Generate 5 random letters\r\n                  const randomCharCode = sketch.floor(sketch.random(65, 91)); // Random ASCII code for uppercase letters\r\n                  const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\r\n                  const x = (i + 1) * letterSpacing; // Calculate x position based on index and spacing\r\n                  const y = sketch.height / 2 + sketch.random(-sketch.height * 0.15, sketch.height * 0.1); // Randomly offset vertically\r\n                  letters.push({ letter: randomLetter, x, y });\r\n              }\r\n          };\r\n\r\n          sketch.draw = () => {\r\n              sketch.background(250); // Clear background\r\n              for (let i = 0; i < letters.length; i++) {\r\n                  const { letter, x, y } = letters[i];\r\n                  sketch.text(letter, x, y);\r\n              }\r\n          };\r\n      });\r\n  },\r\n  methods: {\r\n      redirectToError() {\r\n          // Redirect to /error route\r\n          this.$router.push('/error');\r\n      }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";AAWA,OAAOA,EAAC,MAAO,IAAI,EAAE;;AAErB,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,OAAOA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAI,IAAI,CAACC,KAAK,CAACC,YAAY;IACzC,MAAMC,KAAI,GAAI,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC,EAAE;;IAErC,IAAIT,EAAE,CAACU,MAAK,IAAK;MACb,IAAIC,OAAM,GAAI,EAAE,EAAE;MAClB,IAAIC,YAAY,EAAE;;MAElBF,MAAM,CAACG,OAAM,GAAI,MAAM;QACrBN,KAAI,GAAIO,QAAQ,CAAC,4CAA4C,CAAC;QAC9DN,KAAI,GAAIM,QAAQ,CAAC,qDAAqD,CAAC;QACvEL,KAAI,GAAIK,QAAQ,CAAC,oCAAoC,CAAC;QACpDF,YAAW,GAAIF,MAAM,CAACK,MAAM,CAACT,KAAK,CAAC,EAAE;QACrCI,MAAM,CAACM,QAAQ,CAACJ,YAAY,CAAC,EAAE;MACnC,CAAC;MAEDF,MAAM,CAACO,KAAI,GAAI,MAAM;QACjBP,MAAM,CAACQ,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,MAAM,CAAChB,SAAS,CAAC;QAC/CO,MAAM,CAACU,UAAU,CAAC,GAAG,CAAC;QACtBV,MAAM,CAACW,SAAS,CAACX,MAAM,CAACY,MAAM,EAAEZ,MAAM,CAACY,MAAM,CAAC,EAAE;;QAEhD,MAAMC,UAAS,GAAI,CAAC;QACpB,MAAMC,aAAY,GAAId,MAAM,CAACe,KAAI,IAAKF,UAAS,GAAI,CAAC,CAAC,EAAE;QACvD,KAAK,IAAIG,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIH,UAAU,EAAEG,CAAC,EAAE,EAAE;UAAE;UACnC,MAAMC,cAAa,GAAIjB,MAAM,CAACkB,KAAK,CAAClB,MAAM,CAACK,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE;UAC5D,MAAMc,YAAW,GAAIC,MAAM,CAACC,YAAY,CAACJ,cAAc,CAAC,EAAE;UAC1D,MAAMK,CAAA,GAAI,CAACN,CAAA,GAAI,CAAC,IAAIF,aAAa,EAAE;UACnC,MAAMS,CAAA,GAAIvB,MAAM,CAACwB,MAAK,GAAI,IAAIxB,MAAM,CAACK,MAAM,CAAC,CAACL,MAAM,CAACwB,MAAK,GAAI,IAAI,EAAExB,MAAM,CAACwB,MAAK,GAAI,GAAG,CAAC,EAAE;UACzFvB,OAAO,CAACwB,IAAI,CAAC;YAAEC,MAAM,EAAEP,YAAY;YAAEG,CAAC;YAAEC;UAAE,CAAC,CAAC;QAChD;MACJ,CAAC;MAEDvB,MAAM,CAAC2B,IAAG,GAAI,MAAM;QAChB3B,MAAM,CAACU,UAAU,CAAC,GAAG,CAAC,EAAE;QACxB,KAAK,IAAIM,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIf,OAAO,CAAC2B,MAAM,EAAEZ,CAAC,EAAE,EAAE;UACrC,MAAM;YAAEU,MAAM;YAAEJ,CAAC;YAAEC;UAAE,IAAItB,OAAO,CAACe,CAAC,CAAC;UACnChB,MAAM,CAAC6B,IAAI,CAACH,MAAM,EAAEJ,CAAC,EAAEC,CAAC,CAAC;QAC7B;MACJ,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EACDO,OAAO,EAAE;IACLC,eAAeA,CAAA,EAAG;MACd;MACA,IAAI,CAACC,OAAO,CAACP,IAAI,CAAC,QAAQ,CAAC;IAC/B;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}