{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport p5 from 'p5'; // Import 'p5' library\n\nexport default {\n  name: 'Standartcaptcha',\n  data() {\n    return {\n      inputValue: '',\n      // Initialize inputValue data property\n      fonts: [require('@/assets/Barriecito/Barriecito-Regular.ttf'), require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'), require('@/assets/Roboto/Roboto-Regular.ttf')]\n    };\n  },\n  mounted() {\n    const container = this.$refs.sketchWindow;\n    new p5(sketch => {\n      let letters = []; // Array to store unique letters\n      let circleX, circleY, circleRadius; // Variables for circle position and radius\n\n      sketch.setup = () => {\n        const canvas = sketch.createCanvas(500, 300).parent(container);\n        sketch.background(250);\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\n\n        // Generate random circle position and radius\n        circleX = sketch.width / 2 + sketch.random(-40, 40);\n        circleY = sketch.height / 2 + sketch.random(-40, 40);\n        circleRadius = sketch.random(100, 300);\n        sketch.push();\n        sketch.fill(160); // Set fill color to white\n        sketch.circle(circleX, circleY, circleRadius); // Draw circle with random position and radius\n        sketch.pop();\n\n        // Generate unique letters\n        const uniqueLetters = new Set(); // Using a Set to ensure uniqueness\n        while (uniqueLetters.size < 5) {\n          const randomCharCode = sketch.floor(sketch.random(0, 65536)); // Random ASCII code for lowercase letters\n          const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\n          uniqueLetters.add(randomLetter); // Add unique letter to the set\n        }\n\n        // Assign fonts and sizes to each letter\n        const uniqueLettersArray = Array.from(uniqueLetters); // Convert set to array\n        for (let i = 0; i < uniqueLettersArray.length; i++) {\n          const letter = uniqueLettersArray[i];\n          const x = (i + 1) * (sketch.width / (uniqueLettersArray.length + 1)); // Equally distribute letters horizontally\n          const y = sketch.height / 2 + sketch.random(-20, 20); // Center vertically\n          const fontIndex = Math.floor(Math.random() * this.fonts.length); // Randomly select a font\n          const selectedFont = sketch.loadFont(this.fonts[fontIndex]); // Load the selected font\n          const fontSize = 80 + sketch.random(-40, 40);\n          letters.push({\n            letter,\n            x,\n            y,\n            font: selectedFont,\n            fontSize\n          });\n        }\n\n        // Draw random lines across the canvas\n        const numLines = sketch.random(2, 5); // Random number of lines between 2 and 5\n        for (let i = 0; i < numLines; i++) {\n          const startX = sketch.random(sketch.width);\n          const startY = sketch.random(sketch.height);\n          const endX = sketch.random(sketch.width);\n          const endY = sketch.random(sketch.height);\n          sketch.line(startX, startY, endX, endY);\n        }\n        sketch.noLoop();\n        sketch.redraw();\n      };\n      sketch.draw = () => {\n        // Draw letters\n        for (let i = 0; i < letters.length; i++) {\n          const {\n            letter,\n            x,\n            y,\n            font,\n            fontSize\n          } = letters[i];\n          sketch.textSize(fontSize);\n          sketch.textFont(font); // Set font for the current letter\n          // Set font size for the current letter\n          sketch.text(letter, x, y);\n        }\n\n        // Apply Perlin noise to shift pixels slightly\n        for (let x = 0; x < 500; x++) {\n          for (let y = 0; y < 300; y++) {\n            const noiseVal = sketch.noise(x * 0.02, y * 0.02);\n            const shiftX = (noiseVal - 0.5) * 10;\n            const shiftY = (noiseVal - 0.5) * 5;\n            const pixelColor = sketch.get(x, y);\n            sketch.set(x + shiftX, y + shiftY, pixelColor);\n          }\n        }\n        sketch.updatePixels();\n      };\n    });\n  },\n  methods: {\n    redirectToError() {\n      // Redirect to /error route\n      this.$router.push('/error');\n    }\n  }\n};","map":{"version":3,"names":["p5","name","data","inputValue","fonts","require","mounted","container","$refs","sketchWindow","sketch","letters","circleX","circleY","circleRadius","setup","canvas","createCanvas","parent","background","textAlign","CENTER","width","random","height","push","fill","circle","pop","uniqueLetters","Set","size","randomCharCode","floor","randomLetter","String","fromCharCode","add","uniqueLettersArray","Array","from","i","length","letter","x","y","fontIndex","Math","selectedFont","loadFont","fontSize","font","numLines","startX","startY","endX","endY","line","noLoop","redraw","draw","textSize","textFont","text","noiseVal","noise","shiftX","shiftY","pixelColor","get","set","updatePixels","methods","redirectToError","$router"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Fail to be human - Errorama 2024\\captchascheiterlauf\\src\\components\\Standartcaptchavar2.vue"],"sourcesContent":["<template>\r\n    <div class=\"p5state\">\r\n    <div>\r\n      <div class =\"Canvasstyling\" ref=\"sketchWindow\"></div>\r\n    </div>\r\n    <div class=\"InputandButtons\">\r\n      <input type=\"text\" v-model=\"inputValue\" placeholder=\"Enter text\">\r\n      <button @click=\"redirectToError\">I'm not a robot</button>\r\n    </div>\r\n</div>\r\n  </template>\r\n  \r\n  <script>\r\n  import p5 from 'p5'; // Import 'p5' library\r\n  \r\n  export default {\r\n    name: 'Standartcaptcha',\r\n    data() {\r\n      return {\r\n        inputValue: '', // Initialize inputValue data property\r\n        fonts: [\r\n          require('@/assets/Barriecito/Barriecito-Regular.ttf'),\r\n          require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'),\r\n          require('@/assets/Roboto/Roboto-Regular.ttf')\r\n        ]\r\n      };\r\n    },\r\n    mounted() {\r\n      const container = this.$refs.sketchWindow;\r\n  \r\n      new p5(sketch => {\r\n        let letters = []; // Array to store unique letters\r\n        let circleX, circleY, circleRadius; // Variables for circle position and radius\r\n  \r\n        sketch.setup = () => {\r\n          const canvas = sketch.createCanvas(500, 300).parent(container);\r\n          sketch.background(250);\r\n          sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\r\n  \r\n          // Generate random circle position and radius\r\n          circleX = sketch.width / 2 + sketch.random(-40, 40);\r\n          circleY = sketch.height / 2 + sketch.random(-40, 40);\r\n          circleRadius = sketch.random(100, 300);\r\n  \r\n          sketch.push();\r\n          sketch.fill(160); // Set fill color to white\r\n          sketch.circle(circleX, circleY, circleRadius); // Draw circle with random position and radius\r\n          sketch.pop();\r\n  \r\n          // Generate unique letters\r\n          const uniqueLetters = new Set(); // Using a Set to ensure uniqueness\r\n          while (uniqueLetters.size < 5) {\r\n            const randomCharCode = sketch.floor(sketch.random(0, 65536)); // Random ASCII code for lowercase letters\r\n            const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\r\n            uniqueLetters.add(randomLetter); // Add unique letter to the set\r\n          }\r\n  \r\n          // Assign fonts and sizes to each letter\r\n          const uniqueLettersArray = Array.from(uniqueLetters); // Convert set to array\r\n          for (let i = 0; i < uniqueLettersArray.length; i++) {\r\n            const letter = uniqueLettersArray[i];\r\n            const x = (i + 1) * (sketch.width / (uniqueLettersArray.length + 1)); // Equally distribute letters horizontally\r\n            const y = sketch.height / 2 + sketch.random(-20, 20); // Center vertically\r\n            const fontIndex = Math.floor(Math.random() * this.fonts.length); // Randomly select a font\r\n            const selectedFont = sketch.loadFont(this.fonts[fontIndex]); // Load the selected font\r\n            const fontSize = 80 + sketch.random(-40, 40);\r\n            letters.push({ letter, x, y, font: selectedFont, fontSize });\r\n          }\r\n  \r\n          // Draw random lines across the canvas\r\n          const numLines = sketch.random(2, 5); // Random number of lines between 2 and 5\r\n          for (let i = 0; i < numLines; i++) {\r\n            const startX = sketch.random(sketch.width);\r\n            const startY = sketch.random(sketch.height);\r\n            const endX = sketch.random(sketch.width);\r\n            const endY = sketch.random(sketch.height);\r\n            sketch.line(startX, startY, endX, endY);\r\n          }\r\n  \r\n          sketch.noLoop()\r\n          sketch.redraw()\r\n        };\r\n  \r\n        sketch.draw = () => {\r\n          // Draw letters\r\n          for (let i = 0; i < letters.length; i++) {\r\n            const { letter, x, y, font, fontSize } = letters[i];\r\n            sketch.textSize(fontSize);\r\n            sketch.textFont(font); // Set font for the current letter\r\n            // Set font size for the current letter\r\n            sketch.text(letter, x, y);\r\n          }\r\n  \r\n          // Apply Perlin noise to shift pixels slightly\r\n          for (let x = 0; x < 500; x++) {\r\n            for (let y = 0; y < 300; y++) {\r\n              const noiseVal = sketch.noise(x * 0.02, y * 0.02);\r\n              const shiftX = (noiseVal - 0.5) * 10;\r\n              const shiftY = (noiseVal - 0.5) * 5;\r\n              const pixelColor = sketch.get(x, y);\r\n              sketch.set(x + shiftX, y + shiftY, pixelColor);\r\n            }\r\n          }\r\n  \r\n          sketch.updatePixels();\r\n        };\r\n      });\r\n    },\r\n    methods: {\r\n      redirectToError() {\r\n        // Redirect to /error route\r\n        this.$router.push('/error');\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style>\r\n  .Canvasstyling {\r\n  border: 2px;\r\n  border-radius: 3px;\r\n  border-color: black;\r\n  }\r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}