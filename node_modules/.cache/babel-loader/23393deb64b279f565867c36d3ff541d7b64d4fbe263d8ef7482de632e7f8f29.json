{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport p5 from 'p5'; // Ensure 'p5' is correctly imported\n\nexport default {\n  name: 'Standartcaptcha',\n  mounted() {\n    const container = this.$refs.sketchWindow;\n    const fontPaths = [require('@/assets/Barriecito/Barriecito-Regular.ttf'), require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'), require('@/assets/Roboto/Roboto-Regular.ttf')]; // Array of font file paths\n\n    new p5(sketch => {\n      let letters = []; // Array to store letters\n      let selectedFont; // Variable to store selected font\n\n      sketch.preload = () => {\n        const fontIndex = Math.floor(Math.random() * fontPaths.length); // Randomly select a font path\n        const fontPath = fontPaths[fontIndex]; // Get the selected font path\n        selectedFont = sketch.loadFont(fontPath); // Load the font asynchronously\n      };\n      sketch.setup = () => {\n        sketch.createCanvas(500, 200).parent(container);\n        sketch.background(250);\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\n\n        const numLetters = 5;\n        const letterSpacing = sketch.width / (numLetters + 1); // Calculate spacing between letters\n        for (let i = 0; i < numLetters; i++) {\n          // Generate 5 random letters\n          const randomCharCode = sketch.floor(sketch.random(65, 91)); // Random ASCII code for uppercase letters\n          const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\n          const x = (i + 1) * letterSpacing; // Calculate x position based on index and spacing\n          const y = sketch.height / 2 + sketch.random(-sketch.height * 0.15, sketch.height * 0.1); // Randomly offset vertically\n          letters.push({\n            letter: randomLetter,\n            x,\n            y\n          });\n        }\n      };\n      sketch.draw = () => {\n        sketch.background(250); // Clear background\n        sketch.textFont(selectedFont); // Set selected font\n        for (let i = 0; i < letters.length; i++) {\n          const {\n            letter,\n            x,\n            y\n          } = letters[i];\n          sketch.text(letter, x, y);\n        }\n      };\n    });\n  },\n  methods: {\n    redirectToError() {\n      // Redirect to /error route\n      this.$router.push('/error');\n    }\n  }\n};","map":{"version":3,"names":["p5","name","mounted","container","$refs","sketchWindow","fontPaths","require","sketch","letters","selectedFont","preload","fontIndex","Math","floor","random","length","fontPath","loadFont","setup","createCanvas","parent","background","textAlign","CENTER","numLetters","letterSpacing","width","i","randomCharCode","randomLetter","String","fromCharCode","x","y","height","push","letter","draw","textFont","text","methods","redirectToError","$router"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Standartcaptcha.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div ref=\"sketchWindow\"></div>\r\n  </div>\r\n  <div class=\"InputandButtons\">\r\n    <input type=\"text\" v-model=\"inputValue\" placeholder=\"Geben Sie den Text ein\">\r\n    <button @click=\"redirectToError\">Ich bin kein Roboter</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport p5 from 'p5'; // Ensure 'p5' is correctly imported\r\n\r\nexport default {\r\n  name: 'Standartcaptcha',\r\n  mounted() {\r\n    const container = this.$refs.sketchWindow;\r\n    const fontPaths = [\r\n      require('@/assets/Barriecito/Barriecito-Regular.ttf'),\r\n      require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'),\r\n      require('@/assets/Roboto/Roboto-Regular.ttf')\r\n    ]; // Array of font file paths\r\n\r\n    new p5(sketch => {\r\n      let letters = []; // Array to store letters\r\n      let selectedFont; // Variable to store selected font\r\n\r\n      sketch.preload = () => {\r\n        const fontIndex = Math.floor(Math.random() * fontPaths.length); // Randomly select a font path\r\n        const fontPath = fontPaths[fontIndex]; // Get the selected font path\r\n        selectedFont = sketch.loadFont(fontPath); // Load the font asynchronously\r\n      };\r\n\r\n      sketch.setup = () => {\r\n        sketch.createCanvas(500, 200).parent(container);\r\n        sketch.background(250);\r\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\r\n        \r\n        const numLetters = 5;\r\n        const letterSpacing = sketch.width / (numLetters + 1); // Calculate spacing between letters\r\n        for (let i = 0; i < numLetters; i++) { // Generate 5 random letters\r\n          const randomCharCode = sketch.floor(sketch.random(65, 91)); // Random ASCII code for uppercase letters\r\n          const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\r\n          const x = (i + 1) * letterSpacing; // Calculate x position based on index and spacing\r\n          const y = sketch.height / 2 + sketch.random(-sketch.height * 0.15, sketch.height * 0.1); // Randomly offset vertically\r\n          letters.push({ letter: randomLetter, x, y });\r\n        }\r\n      };\r\n\r\n      sketch.draw = () => {\r\n        sketch.background(250); // Clear background\r\n        sketch.textFont(selectedFont); // Set selected font\r\n        for (let i = 0; i < letters.length; i++) {\r\n          const { letter, x, y } = letters[i];\r\n          sketch.text(letter, x, y);\r\n        }\r\n      };\r\n    });\r\n  },\r\n  methods: {\r\n    redirectToError() {\r\n      // Redirect to /error route\r\n      this.$router.push('/error');\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";AAWA,OAAOA,EAAC,MAAO,IAAI,EAAE;;AAErB,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,OAAOA,CAAA,EAAG;IACR,MAAMC,SAAQ,GAAI,IAAI,CAACC,KAAK,CAACC,YAAY;IACzC,MAAMC,SAAQ,GAAI,CAChBC,OAAO,CAAC,4CAA4C,CAAC,EACrDA,OAAO,CAAC,qDAAqD,CAAC,EAC9DA,OAAO,CAAC,oCAAoC,EAC7C,EAAE;;IAEH,IAAIP,EAAE,CAACQ,MAAK,IAAK;MACf,IAAIC,OAAM,GAAI,EAAE,EAAE;MAClB,IAAIC,YAAY,EAAE;;MAElBF,MAAM,CAACG,OAAM,GAAI,MAAM;QACrB,MAAMC,SAAQ,GAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAIT,SAAS,CAACU,MAAM,CAAC,EAAE;QAChE,MAAMC,QAAO,GAAIX,SAAS,CAACM,SAAS,CAAC,EAAE;QACvCF,YAAW,GAAIF,MAAM,CAACU,QAAQ,CAACD,QAAQ,CAAC,EAAE;MAC5C,CAAC;MAEDT,MAAM,CAACW,KAAI,GAAI,MAAM;QACnBX,MAAM,CAACY,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,MAAM,CAAClB,SAAS,CAAC;QAC/CK,MAAM,CAACc,UAAU,CAAC,GAAG,CAAC;QACtBd,MAAM,CAACe,SAAS,CAACf,MAAM,CAACgB,MAAM,EAAEhB,MAAM,CAACgB,MAAM,CAAC,EAAE;;QAEhD,MAAMC,UAAS,GAAI,CAAC;QACpB,MAAMC,aAAY,GAAIlB,MAAM,CAACmB,KAAI,IAAKF,UAAS,GAAI,CAAC,CAAC,EAAE;QACvD,KAAK,IAAIG,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIH,UAAU,EAAEG,CAAC,EAAE,EAAE;UAAE;UACrC,MAAMC,cAAa,GAAIrB,MAAM,CAACM,KAAK,CAACN,MAAM,CAACO,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE;UAC5D,MAAMe,YAAW,GAAIC,MAAM,CAACC,YAAY,CAACH,cAAc,CAAC,EAAE;UAC1D,MAAMI,CAAA,GAAI,CAACL,CAAA,GAAI,CAAC,IAAIF,aAAa,EAAE;UACnC,MAAMQ,CAAA,GAAI1B,MAAM,CAAC2B,MAAK,GAAI,IAAI3B,MAAM,CAACO,MAAM,CAAC,CAACP,MAAM,CAAC2B,MAAK,GAAI,IAAI,EAAE3B,MAAM,CAAC2B,MAAK,GAAI,GAAG,CAAC,EAAE;UACzF1B,OAAO,CAAC2B,IAAI,CAAC;YAAEC,MAAM,EAAEP,YAAY;YAAEG,CAAC;YAAEC;UAAE,CAAC,CAAC;QAC9C;MACF,CAAC;MAED1B,MAAM,CAAC8B,IAAG,GAAI,MAAM;QAClB9B,MAAM,CAACc,UAAU,CAAC,GAAG,CAAC,EAAE;QACxBd,MAAM,CAAC+B,QAAQ,CAAC7B,YAAY,CAAC,EAAE;QAC/B,KAAK,IAAIkB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAInB,OAAO,CAACO,MAAM,EAAEY,CAAC,EAAE,EAAE;UACvC,MAAM;YAAES,MAAM;YAAEJ,CAAC;YAAEC;UAAE,IAAIzB,OAAO,CAACmB,CAAC,CAAC;UACnCpB,MAAM,CAACgC,IAAI,CAACH,MAAM,EAAEJ,CAAC,EAAEC,CAAC,CAAC;QAC3B;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EACDO,OAAO,EAAE;IACPC,eAAeA,CAAA,EAAG;MAChB;MACA,IAAI,CAACC,OAAO,CAACP,IAAI,CAAC,QAAQ,CAAC;IAC7B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}