{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"sketchWindow\"\n};\nconst _hoisted_2 = {\n  class: \"InputandButtons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */)]), _createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.inputValue = $event),\n    placeholder: \"Enter text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.inputValue]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.redirectToError && $options.redirectToError(...args))\n  }, \"I'm not a robot\")])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_hoisted_2","type","_cache","$event","$data","inputValue","placeholder","onClick","args","$options","redirectToError"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Standartcaptcha.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div ref=\"sketchWindow\"></div>\r\n  </div>\r\n  <div class=\"InputandButtons\">\r\n    <input type=\"text\" v-model=\"inputValue\" placeholder=\"Enter text\">\r\n    <button @click=\"redirectToError\">I'm not a robot</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport p5 from 'p5'; // Import 'p5' library\r\n\r\nexport default {\r\n  name: 'Standartcaptcha',\r\n  data() {\r\n    return {\r\n      inputValue: '', // Initialize inputValue data property\r\n      fonts: [\r\n        require('@/assets/Barriecito/Barriecito-Regular.ttf'),\r\n        require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'),\r\n        require('@/assets/Roboto/Roboto-Regular.ttf')\r\n      ]\r\n    };\r\n  },\r\n  mounted() {\r\n    const container = this.$refs.sketchWindow;\r\n\r\n    new p5(sketch => {\r\n      let letters = []; // Array to store unique letters\r\n      let circleX, circleY, circleRadius; // Variables for circle position and radius\r\n\r\n      sketch.setup = () => {\r\n        const canvas = sketch.createCanvas(500, 300).parent(container);\r\n        sketch.background(250);\r\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\r\n\r\n        // Generate random circle position and radius\r\n        circleX = sketch.width / 2 + sketch.random(-40, 40);\r\n        circleY = sketch.height / 2 + sketch.random(-40, 40);\r\n        circleRadius = sketch.random(100, 300);\r\n        \r\n        sketch.push();\r\n        sketch.fill(160); // Set fill color to white\r\n        sketch.circle(circleX, circleY, circleRadius); // Draw circle with random position and radius\r\n        sketch.pop();\r\n\r\n        // Generate unique letters\r\n        const uniqueLetters = new Set(); // Using a Set to ensure uniqueness\r\n        while (uniqueLetters.size < 5) {\r\n          const randomCharCode = sketch.floor(sketch.random(97, 123)); // Random ASCII code for lowercase letters\r\n          const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\r\n          uniqueLetters.add(randomLetter); // Add unique letter to the set\r\n        }\r\n\r\n        // Assign fonts and sizes to each letter\r\n        const uniqueLettersArray = Array.from(uniqueLetters); // Convert set to array\r\n        for (let i = 0; i < uniqueLettersArray.length; i++) {\r\n          const letter = uniqueLettersArray[i];\r\n          const x = (i + 1) * (sketch.width / (uniqueLettersArray.length + 1)); // Equally distribute letters horizontally\r\n          const y = sketch.height / 2 + sketch.random(-20, 20); // Center vertically\r\n          const fontIndex = Math.floor(Math.random() * this.fonts.length); // Randomly select a font\r\n          const selectedFont = sketch.loadFont(this.fonts[fontIndex]); // Load the selected font\r\n          const fontSize = 80 + sketch.random(-40, 40);\r\n          letters.push({ letter, x, y, font: selectedFont, fontSize });\r\n        }\r\n\r\n        // Draw random lines across the canvas\r\n        const numLines = sketch.random(2, 5); // Random number of lines between 2 and 5\r\n        for (let i = 0; i < numLines; i++) {\r\n          const startX = sketch.random(sketch.width);\r\n          const startY = sketch.random(sketch.height);\r\n          const endX = sketch.random(sketch.width);\r\n          const endY = sketch.random(sketch.height);\r\n          sketch.line(startX, startY, endX, endY);\r\n        }\r\nsketch.redraw(2)\r\nsketch.noLoop()      };\r\n\r\n      sketch.draw = () => {\r\n        // Draw letters\r\n        for (let i = 0; i < letters.length; i++) {\r\n          const { letter, x, y, font, fontSize } = letters[i];\r\n          sketch.textSize(fontSize);\r\n          sketch.textFont(font); // Set font for the current letter\r\n           // Set font size for the current letter\r\n          sketch.text(letter, x, y);\r\n        }\r\n\r\n        // Apply Perlin noise to shift pixels slightly\r\n        for (let x = 0; x < 500; x++) {\r\n          for (let y = 0; y < 300; y++) {\r\n            const noiseVal = sketch.noise(x * 0.02, y * 0.02);\r\n            const shiftX = (noiseVal - 0.5) * 10;\r\n            const shiftY = (noiseVal - 0.5) * 5;\r\n            const pixelColor = sketch.get(x, y);\r\n            sketch.set(x + shiftX, y + shiftY, pixelColor);\r\n          }\r\n        }\r\n\r\n        sketch.updatePixels();\r\n      };\r\n    });\r\n  },\r\n  methods: {\r\n    redirectToError() {\r\n      // Redirect to /error route\r\n      this.$router.push('/error');\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;EAESA,GAAG,EAAC;AAAc;;EAEpBC,KAAK,EAAC;AAAiB;;uBAJ9BC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CAEM,cADJA,mBAAA,CAA8B,OAA9BC,UAA8B,8B,GAEhCD,mBAAA,CAGM,OAHNE,UAGM,G,gBAFJF,mBAAA,CAAiE;IAA1DG,IAAI,EAAC,MAAM;IALtB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAKgCC,KAAA,CAAAC,UAAU,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAxBF,KAAA,CAAAC,UAAU,E,GACtCP,mBAAA,CAAyD;IAAhDS,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;KAAE,iBAAe,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}