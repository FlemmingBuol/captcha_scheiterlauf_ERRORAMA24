{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport p5 from 'p5'; // Ensure 'p5' is correctly imported\n\nexport default {\n  name: 'Standartcaptcha',\n  data() {\n    return {\n      fonts: [require('@/assets/Barriecito/Barriecito-Regular.ttf'), require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'), require('@/assets/Roboto/Roboto-Regular.ttf')] // Array of font file paths\n    };\n  },\n  mounted() {\n    const container = this.$refs.sketchWindow;\n    new p5(sketch => {\n      let letters = []; // Array to store letters\n      let circleX, circleY, circleRadius; // Variables for circle position and radius\n\n      sketch.setup = () => {\n        sketch.createCanvas(500, 300).parent(container);\n        sketch.background(250);\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\n\n        // Generate random circle position and radius\n        circleX = sketch.width / 2;\n        circleY = sketch.height / 2;\n        circleRadius = sketch.random(100, 300);\n\n        // Generate 5 random letters with modified font and fontsize\n        const numLetters = 5;\n        const letterSpacing = sketch.width / (numLetters + 1); // Calculate spacing between letters\n        for (let i = 0; i < numLetters; i++) {\n          const randomCharCode = sketch.floor(sketch.random(97, 123)); // Random ASCII code for lowercase letters\n          const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\n          const x = (i + 1) * letterSpacing; // Calculate x position based on index and spacing\n          const y = sketch.height / 2 + sketch.random(-sketch.height * 0.15, sketch.height * 0.1); // Randomly offset vertically\n          const fontIndex = Math.floor(Math.random() * this.fonts.length); // Randomly select a font\n          const selectedFont = sketch.loadFont(this.fonts[fontIndex]); // Load the selected font\n          const fontSize = 35 + 5 * i; // Increase font size by 5 for each letter\n          letters.push({\n            letter: randomLetter,\n            x,\n            y,\n            font: selectedFont,\n            fontSize\n          });\n        }\n\n        // Draw black circle\n        sketch.fill(0); // Set fill color to black\n        sketch.push();\n        sketch.circle(circleX, circleY, circleRadius); // Draw circle with random position and radius\n        sketch.pop();\n        // Draw random lines across the canvas\n        const numLines = sketch.random(2, 5); // Random number of lines between 2 and 5\n        for (let i = 0; i < numLines; i++) {\n          const startX = sketch.random(sketch.width);\n          const startY = sketch.random(sketch.height);\n          const endX = sketch.random(sketch.width);\n          const endY = sketch.random(sketch.height);\n          sketch.line(startX, startY, endX, endY);\n        }\n\n        // Apply Perlin noise to shift pixels slightly\n        for (let x = 0; x < 500; x++) {\n          for (let y = 0; y < 300; y++) {\n            const noiseVal = sketch.noise(x * 0.01, y * 0.01);\n            const shiftX = (noiseVal - 0.5) * 5;\n            const shiftY = (noiseVal - 0.5) * 5;\n            const pixelColor = sketch.get(x, y);\n            sketch.set(x + shiftX, y + shiftY, pixelColor);\n          }\n        }\n        sketch.updatePixels();\n      };\n      sketch.draw = () => {\n        // Draw letters\n        for (let i = 0; i < letters.length; i++) {\n          const {\n            letter,\n            x,\n            y,\n            font,\n            fontSize\n          } = letters[i];\n          sketch.textFont(font); // Set font for the current letter\n          sketch.textSize(fontSize); // Set font size for the current letter\n          sketch.text(letter, x, y);\n        }\n      };\n    });\n  },\n  methods: {\n    redirectToError() {\n      // Redirect to /error route\n      this.$router.push('/error');\n    }\n  }\n};","map":{"version":3,"names":["p5","name","data","fonts","require","mounted","container","$refs","sketchWindow","sketch","letters","circleX","circleY","circleRadius","setup","createCanvas","parent","background","textAlign","CENTER","width","height","random","numLetters","letterSpacing","i","randomCharCode","floor","randomLetter","String","fromCharCode","x","y","fontIndex","Math","length","selectedFont","loadFont","fontSize","push","letter","font","fill","circle","pop","numLines","startX","startY","endX","endY","line","noiseVal","noise","shiftX","shiftY","pixelColor","get","set","updatePixels","draw","textFont","textSize","text","methods","redirectToError","$router"],"sources":["C:\\Users\\Flemming Buol\\Desktop\\Work 2024\\Januar\\Captcha Errorama\\Errorama-Fail-to-be-human\\Lets Build it FR\\captchascheiterlauf\\src\\components\\Standartcaptcha.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div ref=\"sketchWindow\"></div>\r\n  </div>\r\n  <div class=\"InputandButtons\">\r\n    <input type=\"text\" v-model=\"inputValue\" placeholder=\"Geben Sie den Text ein\">\r\n    <button @click=\"redirectToError\">Ich bin kein Roboter</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport p5 from 'p5'; // Ensure 'p5' is correctly imported\r\n\r\nexport default {\r\n  name: 'Standartcaptcha',\r\n  data() {\r\n    return {\r\n      fonts: [\r\n        require('@/assets/Barriecito/Barriecito-Regular.ttf'),\r\n        require('@/assets/DM_Serif_Display/DMSerifDisplay-Italic.ttf'),\r\n        require('@/assets/Roboto/Roboto-Regular.ttf')\r\n      ] // Array of font file paths\r\n    };\r\n  },\r\n  mounted() {\r\n    const container = this.$refs.sketchWindow;\r\n\r\n    new p5(sketch => {\r\n      let letters = []; // Array to store letters\r\n      let circleX, circleY, circleRadius; // Variables for circle position and radius\r\n\r\n      sketch.setup = () => {\r\n        sketch.createCanvas(500, 300).parent(container);\r\n        sketch.background(250);\r\n        sketch.textAlign(sketch.CENTER, sketch.CENTER); // Align text to center\r\n        \r\n        // Generate random circle position and radius\r\n        circleX = sketch.width / 2;\r\n        circleY = sketch.height / 2;\r\n        circleRadius = sketch.random(100, 300);\r\n\r\n        // Generate 5 random letters with modified font and fontsize\r\n        const numLetters = 5;\r\n        const letterSpacing = sketch.width / (numLetters + 1); // Calculate spacing between letters\r\n        for (let i = 0; i < numLetters; i++) {\r\n          const randomCharCode = sketch.floor(sketch.random(97, 123)); // Random ASCII code for lowercase letters\r\n          const randomLetter = String.fromCharCode(randomCharCode); // Convert ASCII code to letter\r\n          const x = (i + 1) * letterSpacing; // Calculate x position based on index and spacing\r\n          const y = sketch.height / 2 + sketch.random(-sketch.height * 0.15, sketch.height * 0.1); // Randomly offset vertically\r\n          const fontIndex = Math.floor(Math.random() * this.fonts.length); // Randomly select a font\r\n          const selectedFont = sketch.loadFont(this.fonts[fontIndex]); // Load the selected font\r\n          const fontSize = 35 + 5 * i; // Increase font size by 5 for each letter\r\n          letters.push({ letter: randomLetter, x, y, font: selectedFont, fontSize });\r\n        }\r\n        \r\n        // Draw black circle\r\n        sketch.fill(0); // Set fill color to black\r\n        sketch.push()\r\n        sketch.circle(circleX, circleY, circleRadius); // Draw circle with random position and radius\r\nsketch.pop()\r\n        // Draw random lines across the canvas\r\n        const numLines = sketch.random(2, 5); // Random number of lines between 2 and 5\r\n        for (let i = 0; i < numLines; i++) {\r\n          const startX = sketch.random(sketch.width);\r\n          const startY = sketch.random(sketch.height);\r\n          const endX = sketch.random(sketch.width);\r\n          const endY = sketch.random(sketch.height);\r\n          sketch.line(startX, startY, endX, endY);\r\n        }\r\n\r\n        // Apply Perlin noise to shift pixels slightly\r\n        for (let x = 0; x < 500; x++) {\r\n          for (let y = 0; y < 300; y++) {\r\n            const noiseVal = sketch.noise(x * 0.01, y * 0.01);\r\n            const shiftX = (noiseVal - 0.5) * 5;\r\n            const shiftY = (noiseVal - 0.5) * 5;\r\n            const pixelColor = sketch.get(x, y);\r\n            sketch.set(x + shiftX, y + shiftY, pixelColor);\r\n          }\r\n        }\r\n        sketch.updatePixels();\r\n      };\r\n\r\n      sketch.draw = () => {\r\n        // Draw letters\r\n        for (let i = 0; i < letters.length; i++) {\r\n          const { letter, x, y, font, fontSize } = letters[i];\r\n          sketch.textFont(font); // Set font for the current letter\r\n          sketch.textSize(fontSize); // Set font size for the current letter\r\n          sketch.text(letter, x, y);\r\n        }\r\n      };\r\n    });\r\n  },\r\n  methods: {\r\n    redirectToError() {\r\n      // Redirect to /error route\r\n      this.$router.push('/error');\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}